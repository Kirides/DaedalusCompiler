//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/grzeg/Source/Repos/DaedalusCompiler/src/Parser\Daedalus.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DaedalusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, Const=34, Var=35, If=36, Int=37, Else=38, Func=39, 
		String=40, Class=41, Void=42, Return=43, Float=44, Prototype=45, Instance=46, 
		Null=47, Identifier=48, IntegerLiteral=49, FloatLiteral=50, StringLiteral=51, 
		Whitespace=52, Newline=53, BlockComment=54, LineComment=55;
	public const int
		RULE_daedalusFile = 0, RULE_functionDef = 1, RULE_constDef = 2, RULE_classDef = 3, 
		RULE_prototypeDef = 4, RULE_instanceDef = 5, RULE_instanceDecl = 6, RULE_varDecl = 7, 
		RULE_constArrayDef = 8, RULE_constArrayAssignment = 9, RULE_constValueDef = 10, 
		RULE_constValueAssignment = 11, RULE_varArrayDecl = 12, RULE_varValueDecl = 13, 
		RULE_parameterList = 14, RULE_parameterDecl = 15, RULE_statementBlock = 16, 
		RULE_statement = 17, RULE_funcCall = 18, RULE_assignment = 19, RULE_ifBlock = 20, 
		RULE_returnStatement = 21, RULE_expression = 22, RULE_simpleValue = 23, 
		RULE_value = 24, RULE_complexReference = 25, RULE_complexReferenceNode = 26, 
		RULE_typeReference = 27, RULE_nameNode = 28, RULE_referenceNode = 29;
	public static readonly string[] ruleNames = {
		"daedalusFile", "functionDef", "constDef", "classDef", "prototypeDef", 
		"instanceDef", "instanceDecl", "varDecl", "constArrayDef", "constArrayAssignment", 
		"constValueDef", "constValueAssignment", "varArrayDecl", "varValueDecl", 
		"parameterList", "parameterDecl", "statementBlock", "statement", "funcCall", 
		"assignment", "ifBlock", "returnStatement", "expression", "simpleValue", 
		"value", "complexReference", "complexReferenceNode", "typeReference", 
		"nameNode", "referenceNode"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'{'", "'}'", "'('", "')'", "'['", "']'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'-'", "'!'", "'~'", "'+'", "'*'", "'/'", "'%'", 
		"'<<'", "'>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&'", "'|'", 
		"'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Const", "Var", 
		"If", "Int", "Else", "Func", "String", "Class", "Void", "Return", "Float", 
		"Prototype", "Instance", "Null", "Identifier", "IntegerLiteral", "FloatLiteral", 
		"StringLiteral", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Daedalus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DaedalusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DaedalusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DaedalusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DaedalusFileContext : ParserRuleContext {
		public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ConstDefContext[] constDef() {
			return GetRuleContexts<ConstDefContext>();
		}
		public ConstDefContext constDef(int i) {
			return GetRuleContext<ConstDefContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public PrototypeDefContext[] prototypeDef() {
			return GetRuleContexts<PrototypeDefContext>();
		}
		public PrototypeDefContext prototypeDef(int i) {
			return GetRuleContext<PrototypeDefContext>(i);
		}
		public InstanceDefContext[] instanceDef() {
			return GetRuleContexts<InstanceDefContext>();
		}
		public InstanceDefContext instanceDef(int i) {
			return GetRuleContext<InstanceDefContext>(i);
		}
		public InstanceDeclContext[] instanceDecl() {
			return GetRuleContexts<InstanceDeclContext>();
		}
		public InstanceDeclContext instanceDecl(int i) {
			return GetRuleContext<InstanceDeclContext>(i);
		}
		public DaedalusFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daedalusFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterDaedalusFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitDaedalusFile(this);
		}
	}

	[RuleVersion(0)]
	public DaedalusFileContext daedalusFile() {
		DaedalusFileContext _localctx = new DaedalusFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_daedalusFile);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 67;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 60; functionDef();
						}
						break;
					case 2:
						{
						State = 61; constDef();
						}
						break;
					case 3:
						{
						State = 62; varDecl();
						}
						break;
					case 4:
						{
						State = 63; classDef();
						}
						break;
					case 5:
						{
						State = 64; prototypeDef();
						}
						break;
					case 6:
						{
						State = 65; instanceDef();
						}
						break;
					case 7:
						{
						State = 66; instanceDecl();
						}
						break;
					}
					State = 69; Match(T__0);
					}
					} 
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(Func);
			State = 77; typeReference();
			State = 78; nameNode();
			State = 79; parameterList();
			State = 80; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(DaedalusParser.Const, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ConstValueDefContext[] constValueDef() {
			return GetRuleContexts<ConstValueDefContext>();
		}
		public ConstValueDefContext constValueDef(int i) {
			return GetRuleContext<ConstValueDefContext>(i);
		}
		public ConstArrayDefContext[] constArrayDef() {
			return GetRuleContexts<ConstArrayDefContext>();
		}
		public ConstArrayDefContext constArrayDef(int i) {
			return GetRuleContext<ConstArrayDefContext>(i);
		}
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(Const);
			State = 83; typeReference();
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 84; constValueDef();
				}
				break;
			case 2:
				{
				State = 85; constArrayDef();
				}
				break;
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 88; Match(T__1);
				State = 91;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 89; constValueDef();
					}
					break;
				case 2:
					{
					State = 90; constArrayDef();
					}
					break;
				}
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(DaedalusParser.Class, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(Class);
			State = 99; nameNode();
			State = 100; Match(T__2);
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 101; varDecl();
					State = 102; Match(T__0);
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 109; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeDefContext : ParserRuleContext {
		public ITerminalNode Prototype() { return GetToken(DaedalusParser.Prototype, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public PrototypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterPrototypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitPrototypeDef(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeDefContext prototypeDef() {
		PrototypeDefContext _localctx = new PrototypeDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_prototypeDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(Prototype);
			State = 112; nameNode();
			State = 113; Match(T__4);
			State = 114; referenceNode();
			State = 115; Match(T__5);
			State = 116; Match(T__2);
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 119;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 117; assignment();
						}
						break;
					case 2:
						{
						State = 118; funcCall();
						}
						break;
					}
					State = 121; Match(T__0);
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 128; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDefContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public InstanceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDef(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDefContext instanceDef() {
		InstanceDefContext _localctx = new InstanceDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_instanceDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(Instance);
			State = 131; nameNode();
			State = 132; Match(T__4);
			State = 133; referenceNode();
			State = 134; Match(T__5);
			State = 135; Match(T__2);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 136; assignment();
						}
						break;
					case 2:
						{
						State = 137; funcCall();
						}
						break;
					}
					State = 140; Match(T__0);
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 147; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDeclContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public ReferenceNodeContext[] referenceNode() {
			return GetRuleContexts<ReferenceNodeContext>();
		}
		public ReferenceNodeContext referenceNode(int i) {
			return GetRuleContext<ReferenceNodeContext>(i);
		}
		public InstanceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDeclContext instanceDecl() {
		InstanceDeclContext _localctx = new InstanceDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_instanceDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(Instance);
			State = 150; nameNode();
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 151; Match(T__1);
					State = 152; referenceNode();
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 158; Match(T__4);
			State = 159; nameNode();
			State = 160; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VarValueDeclContext[] varValueDecl() {
			return GetRuleContexts<VarValueDeclContext>();
		}
		public VarValueDeclContext varValueDecl(int i) {
			return GetRuleContext<VarValueDeclContext>(i);
		}
		public VarArrayDeclContext[] varArrayDecl() {
			return GetRuleContexts<VarArrayDeclContext>();
		}
		public VarArrayDeclContext varArrayDecl(int i) {
			return GetRuleContext<VarArrayDeclContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(Var);
			State = 163; typeReference();
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 164; varValueDecl();
				}
				break;
			case 2:
				{
				State = 165; varArrayDecl();
				}
				break;
			}
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 168; Match(T__1);
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 169; varValueDecl();
					}
					break;
				case 2:
					{
					State = 170; varArrayDecl();
					}
					break;
				}
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ConstArrayAssignmentContext constArrayAssignment() {
			return GetRuleContext<ConstArrayAssignmentContext>(0);
		}
		public ConstArrayDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayDefContext constArrayDef() {
		ConstArrayDefContext _localctx = new ConstArrayDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_constArrayDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; nameNode();
			State = 179; Match(T__6);
			State = 180; simpleValue();
			State = 181; Match(T__7);
			State = 182; constArrayAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayAssignmentContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConstArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayAssignmentContext constArrayAssignment() {
		ConstArrayAssignmentContext _localctx = new ConstArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_constArrayAssignment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(T__8);
			State = 185; Match(T__2);
			{
			State = 186; expression(0);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 187; Match(T__1);
					State = 188; expression(0);
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
			State = 194; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ConstValueAssignmentContext constValueAssignment() {
			return GetRuleContext<ConstValueAssignmentContext>(0);
		}
		public ConstValueDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueDefContext constValueDef() {
		ConstValueDefContext _localctx = new ConstValueDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_constValueDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; nameNode();
			State = 197; constValueAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstValueAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueAssignmentContext constValueAssignment() {
		ConstValueAssignmentContext _localctx = new ConstValueAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_constValueAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T__8);
			State = 200; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarArrayDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public VarArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varArrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarArrayDeclContext varArrayDecl() {
		VarArrayDeclContext _localctx = new VarArrayDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_varArrayDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; nameNode();
			State = 203; Match(T__6);
			State = 204; simpleValue();
			State = 205; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarValueDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varValueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarValueDeclContext varValueDecl() {
		VarValueDeclContext _localctx = new VarValueDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_varValueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; nameNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(T__4);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 210; parameterDecl();
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 211; Match(T__1);
						State = 212; parameterDecl();
						}
						} 
					}
					State = 217;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				}
			}

			State = 220; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(Var);
			State = 223; typeReference();
			State = 224; nameNode();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 225; Match(T__6);
				State = 226; simpleValue();
				State = 227; Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_statementBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(T__2);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 239;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__4:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case Const:
					case Var:
					case Return:
					case Null:
					case Identifier:
					case IntegerLiteral:
					case FloatLiteral:
					case StringLiteral:
						{
						{
						State = 232; statement();
						State = 233; Match(T__0);
						}
						}
						break;
					case If:
						{
						{
						State = 235; ifBlock();
						State = 237;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 236; Match(T__0);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 246; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; funcCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 250; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 251; constDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 252; varDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 253; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; nameNode();
			State = 257; Match(T__4);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 258; expression(0);
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 259; Match(T__1);
						State = 260; expression(0);
						}
						} 
					}
					State = 265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
			}

			State = 268; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; complexReference();
			State = 271;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 272; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode[] If() { return GetTokens(DaedalusParser.If); }
		public ITerminalNode If(int i) {
			return GetToken(DaedalusParser.If, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(DaedalusParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(DaedalusParser.Else, i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(If);
			State = 275; expression(0);
			State = 276; statementBlock();
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 277; Match(Else);
					State = 278; Match(If);
					State = 279; expression(0);
					State = 280; statementBlock();
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 287; Match(Else);
				State = 288; statementBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(DaedalusParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(Return);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 292; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 296; Match(T__4);
				State = 297; expression(0);
				State = 298; Match(T__5);
				}
				break;
			case 2:
				{
				State = 300;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 301; expression(9);
				}
				break;
			case 3:
				{
				State = 302; value();
				}
				break;
			case 4:
				{
				State = 303; nameNode();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 324;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 307;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 308; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 309;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 310;
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 311; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 313;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 314; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 315;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 316;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 317; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 319;
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__27) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 320; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 322;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 323; expression(4);
						}
						break;
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_simpleValue);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; Match(IntegerLiteral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; referenceNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(DaedalusParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(DaedalusParser.StringLiteral, 0); }
		public ITerminalNode Null() { return GetToken(DaedalusParser.Null, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_value);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; Match(IntegerLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; Match(FloatLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336; Match(Null);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337; funcCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 338; complexReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReference(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceContext complexReference() {
		ComplexReferenceContext _localctx = new ComplexReferenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_complexReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; complexReferenceNode();
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 342; Match(T__32);
				State = 343; complexReferenceNode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceNodeContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ComplexReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceNodeContext complexReferenceNode() {
		ComplexReferenceNodeContext _localctx = new ComplexReferenceNodeContext(Context, State);
		EnterRule(_localctx, 52, RULE_complexReferenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; referenceNode();
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 347; Match(T__6);
				State = 348; simpleValue();
				State = 349; Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public ITerminalNode Void() { return GetToken(DaedalusParser.Void, 0); }
		public ITerminalNode Int() { return GetToken(DaedalusParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(DaedalusParser.Float, 0); }
		public ITerminalNode String() { return GetToken(DaedalusParser.String, 0); }
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 353; referenceNode();
				}
				break;
			case Void:
				{
				State = 354; Match(Void);
				}
				break;
			case Int:
				{
				State = 355; Match(Int);
				}
				break;
			case Float:
				{
				State = 356; Match(Float);
				}
				break;
			case String:
				{
				State = 357; Match(String);
				}
				break;
			case Func:
				{
				State = 358; Match(Func);
				}
				break;
			case Instance:
				{
				State = 359; Match(Instance);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public NameNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterNameNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitNameNode(this);
		}
	}

	[RuleVersion(0)]
	public NameNodeContext nameNode() {
		NameNodeContext _localctx = new NameNodeContext(Context, State);
		EnterRule(_localctx, 56, RULE_nameNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public ReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNodeContext referenceNode() {
		ReferenceNodeContext _localctx = new ReferenceNodeContext(Context, State);
		EnterRule(_localctx, 58, RULE_referenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x171', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x46', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'J', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'M', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'Y', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '^', '\n', '\x4', '\a', '\x4', '`', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '\x63', '\v', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'k', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'n', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'z', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '~', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x81', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x8D', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x91', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x94', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x9C', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x9F', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xA9', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xAE', '\n', '\t', '\a', '\t', '\xB0', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xB3', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xC0', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xC3', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xD8', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xDB', '\v', '\x10', '\x5', '\x10', '\xDD', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xE8', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF0', '\n', 
		'\x12', '\x5', '\x12', '\xF2', '\n', '\x12', '\a', '\x12', '\xF4', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xF7', '\v', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x101', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', 
		'\x14', '\x108', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x10B', '\v', 
		'\x14', '\x5', '\x14', '\x10D', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x11D', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x120', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x124', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x128', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x133', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x147', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x14A', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x14E', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x156', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x15B', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x162', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x16B', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\f', 'K', 'l', '\x7F', '\x92', 
		'\x9D', '\xC1', '\xD9', '\xF5', '\x109', '\x11E', '\x3', '.', ' ', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '\x2', '\n', '\x3', 
		'\x2', '\v', '\xF', '\x3', '\x2', '\x10', '\x13', '\x3', '\x2', '\x14', 
		'\x16', '\x4', '\x2', '\x10', '\x10', '\x13', '\x13', '\x3', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x1D', '\x1E', '\x3', 
		'\x2', '\x1F', '\"', '\x2', '\x18D', '\x2', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'N', '\x3', '\x2', '\x2', '\x2', '\x6', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x64', '\x3', '\x2', '\x2', '\x2', '\n', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x84', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x14', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xE0', '\x3', '\x2', '\x2', '\x2', '\"', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x102', '\x3', '\x2', '\x2', '\x2', '(', '\x110', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x114', '\x3', '\x2', '\x2', '\x2', ',', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x32', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x157', '\x3', '\x2', '\x2', '\x2', '\x36', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		':', '\x16C', '\x3', '\x2', '\x2', '\x2', '<', '\x16E', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x46', '\x5', '\x4', '\x3', '\x2', '?', '\x46', '\x5', 
		'\x6', '\x4', '\x2', '@', '\x46', '\x5', '\x10', '\t', '\x2', '\x41', 
		'\x46', '\x5', '\b', '\x5', '\x2', '\x42', '\x46', '\x5', '\n', '\x6', 
		'\x2', '\x43', '\x46', '\x5', '\f', '\a', '\x2', '\x44', '\x46', '\x5', 
		'\xE', '\b', '\x2', '\x45', '>', '\x3', '\x2', '\x2', '\x2', '\x45', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '@', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '\x3', '\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x3', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\a', ')', '\x2', '\x2', 'O', 'P', '\x5', '\x38', '\x1D', 
		'\x2', 'P', 'Q', '\x5', ':', '\x1E', '\x2', 'Q', 'R', '\x5', '\x1E', '\x10', 
		'\x2', 'R', 'S', '\x5', '\"', '\x12', '\x2', 'S', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\a', '$', '\x2', '\x2', 'U', 'X', '\x5', '\x38', 
		'\x1D', '\x2', 'V', 'Y', '\x5', '\x16', '\f', '\x2', 'W', 'Y', '\x5', 
		'\x12', '\n', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\x61', '\x3', '\x2', '\x2', '\x2', 'Z', ']', 
		'\a', '\x4', '\x2', '\x2', '[', '^', '\x5', '\x16', '\f', '\x2', '\\', 
		'^', '\x5', '\x12', '\n', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x3', '\x2', '\x2', 
		'\x2', '_', 'Z', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '+', 
		'\x2', '\x2', '\x65', '\x66', '\x5', ':', '\x1E', '\x2', '\x66', 'l', 
		'\a', '\x5', '\x2', '\x2', 'g', 'h', '\x5', '\x10', '\t', '\x2', 'h', 
		'i', '\a', '\x3', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 
		'j', 'g', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\x6', '\x2', '\x2', 'p', '\t', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '/', '\x2', '\x2', 'r', 's', '\x5', ':', '\x1E', '\x2', 
		's', 't', '\a', '\a', '\x2', '\x2', 't', 'u', '\x5', '<', '\x1F', '\x2', 
		'u', 'v', '\a', '\b', '\x2', '\x2', 'v', '\x7F', '\a', '\x5', '\x2', '\x2', 
		'w', 'z', '\x5', '(', '\x15', '\x2', 'x', 'z', '\x5', '&', '\x14', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x3', '\x2', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x6', '\x2', '\x2', '\x83', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\a', '\x30', '\x2', '\x2', '\x85', '\x86', 
		'\x5', ':', '\x1E', '\x2', '\x86', '\x87', '\a', '\a', '\x2', '\x2', '\x87', 
		'\x88', '\x5', '<', '\x1F', '\x2', '\x88', '\x89', '\a', '\b', '\x2', 
		'\x2', '\x89', '\x92', '\a', '\x5', '\x2', '\x2', '\x8A', '\x8D', '\x5', 
		'(', '\x15', '\x2', '\x8B', '\x8D', '\x5', '&', '\x14', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', 
		'\x3', '\x2', '\x2', '\x8F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x6', '\x2', 
		'\x2', '\x96', '\r', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', 
		'\x30', '\x2', '\x2', '\x98', '\x9D', '\x5', ':', '\x1E', '\x2', '\x99', 
		'\x9A', '\a', '\x4', '\x2', '\x2', '\x9A', '\x9C', '\x5', '<', '\x1F', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'\a', '\x2', '\x2', '\xA1', '\xA2', '\x5', ':', '\x1E', '\x2', '\xA2', 
		'\xA3', '\a', '\b', '\x2', '\x2', '\xA3', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '%', '\x2', '\x2', '\xA5', '\xA8', '\x5', 
		'\x38', '\x1D', '\x2', '\xA6', '\xA9', '\x5', '\x1C', '\xF', '\x2', '\xA7', 
		'\xA9', '\x5', '\x1A', '\xE', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAB', 
		'\xAE', '\x5', '\x1C', '\xF', '\x2', '\xAC', '\xAE', '\x5', '\x1A', '\xE', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\x11', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', ':', '\x1E', 
		'\x2', '\xB5', '\xB6', '\a', '\t', '\x2', '\x2', '\xB6', '\xB7', '\x5', 
		'\x30', '\x19', '\x2', '\xB7', '\xB8', '\a', '\n', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '\x14', '\v', '\x2', '\xB9', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\v', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x5', '\x2', '\x2', '\xBC', '\xC1', '\x5', '.', '\x18', '\x2', '\xBD', 
		'\xBE', '\a', '\x4', '\x2', '\x2', '\xBE', '\xC0', '\x5', '.', '\x18', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\x6', '\x2', '\x2', '\xC5', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x5', ':', '\x1E', '\x2', '\xC7', '\xC8', '\x5', '\x18', '\r', 
		'\x2', '\xC8', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\v', '\x2', '\x2', '\xCA', '\xCB', '\x5', '.', '\x18', '\x2', '\xCB', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x5', ':', '\x1E', 
		'\x2', '\xCD', '\xCE', '\a', '\t', '\x2', '\x2', '\xCE', '\xCF', '\x5', 
		'\x30', '\x19', '\x2', '\xCF', '\xD0', '\a', '\n', '\x2', '\x2', '\xD0', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x5', ':', '\x1E', 
		'\x2', '\xD2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xDC', '\a', 
		'\a', '\x2', '\x2', '\xD4', '\xD9', '\x5', ' ', '\x11', '\x2', '\xD5', 
		'\xD6', '\a', '\x4', '\x2', '\x2', '\xD6', '\xD8', '\x5', ' ', '\x11', 
		'\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\b', '\x2', 
		'\x2', '\xDF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', 
		'%', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x38', '\x1D', '\x2', '\xE2', 
		'\xE7', '\x5', ':', '\x1E', '\x2', '\xE3', '\xE4', '\a', '\t', '\x2', 
		'\x2', '\xE4', '\xE5', '\x5', '\x30', '\x19', '\x2', '\xE5', '\xE6', '\a', 
		'\n', '\x2', '\x2', '\xE6', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '!', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xF5', '\a', 
		'\x5', '\x2', '\x2', '\xEA', '\xEB', '\x5', '$', '\x13', '\x2', '\xEB', 
		'\xEC', '\a', '\x3', '\x2', '\x2', '\xEC', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEF', '\x5', '*', '\x16', '\x2', '\xEE', '\xF0', '\a', 
		'\x3', '\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x6', '\x2', 
		'\x2', '\xF9', '#', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x101', '\x5', 
		'&', '\x14', '\x2', '\xFB', '\x101', '\x5', '(', '\x15', '\x2', '\xFC', 
		'\x101', '\x5', ',', '\x17', '\x2', '\xFD', '\x101', '\x5', '\x6', '\x4', 
		'\x2', '\xFE', '\x101', '\x5', '\x10', '\t', '\x2', '\xFF', '\x101', '\x5', 
		'.', '\x18', '\x2', '\x100', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x5', ':', '\x1E', 
		'\x2', '\x103', '\x10C', '\a', '\a', '\x2', '\x2', '\x104', '\x109', '\x5', 
		'.', '\x18', '\x2', '\x105', '\x106', '\a', '\x4', '\x2', '\x2', '\x106', 
		'\x108', '\x5', '.', '\x18', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '\b', '\x2', '\x2', '\x10F', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\x5', '\x34', '\x1B', '\x2', '\x111', 
		'\x112', '\t', '\x2', '\x2', '\x2', '\x112', '\x113', '\x5', '.', '\x18', 
		'\x2', '\x113', ')', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\a', 
		'&', '\x2', '\x2', '\x115', '\x116', '\x5', '.', '\x18', '\x2', '\x116', 
		'\x11E', '\x5', '\"', '\x12', '\x2', '\x117', '\x118', '\a', '(', '\x2', 
		'\x2', '\x118', '\x119', '\a', '&', '\x2', '\x2', '\x119', '\x11A', '\x5', 
		'.', '\x18', '\x2', '\x11A', '\x11B', '\x5', '\"', '\x12', '\x2', '\x11B', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x123', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\a', '(', '\x2', '\x2', '\x122', 
		'\x124', '\x5', '\"', '\x12', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x127', '\a', '-', '\x2', '\x2', '\x126', 
		'\x128', '\x5', '.', '\x18', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\b', '\x18', '\x1', '\x2', '\x12A', 
		'\x12B', '\a', '\a', '\x2', '\x2', '\x12B', '\x12C', '\x5', '.', '\x18', 
		'\x2', '\x12C', '\x12D', '\a', '\b', '\x2', '\x2', '\x12D', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\t', '\x3', '\x2', '\x2', '\x12F', 
		'\x133', '\x5', '.', '\x18', '\v', '\x130', '\x133', '\x5', '\x32', '\x1A', 
		'\x2', '\x131', '\x133', '\x5', ':', '\x1E', '\x2', '\x132', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x148', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x135', '\f', '\n', '\x2', '\x2', '\x135', '\x136', '\t', '\x4', '\x2', 
		'\x2', '\x136', '\x147', '\x5', '.', '\x18', '\v', '\x137', '\x138', '\f', 
		'\t', '\x2', '\x2', '\x138', '\x139', '\t', '\x5', '\x2', '\x2', '\x139', 
		'\x147', '\x5', '.', '\x18', '\n', '\x13A', '\x13B', '\f', '\b', '\x2', 
		'\x2', '\x13B', '\x13C', '\t', '\x6', '\x2', '\x2', '\x13C', '\x147', 
		'\x5', '.', '\x18', '\t', '\x13D', '\x13E', '\f', '\a', '\x2', '\x2', 
		'\x13E', '\x13F', '\t', '\a', '\x2', '\x2', '\x13F', '\x147', '\x5', '.', 
		'\x18', '\b', '\x140', '\x141', '\f', '\x6', '\x2', '\x2', '\x141', '\x142', 
		'\t', '\b', '\x2', '\x2', '\x142', '\x147', '\x5', '.', '\x18', '\a', 
		'\x143', '\x144', '\f', '\x5', '\x2', '\x2', '\x144', '\x145', '\t', '\t', 
		'\x2', '\x2', '\x145', '\x147', '\x5', '.', '\x18', '\x6', '\x146', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x140', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\a', 
		'\x33', '\x2', '\x2', '\x14C', '\x14E', '\x5', '<', '\x1F', '\x2', '\x14D', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x156', 
		'\a', '\x33', '\x2', '\x2', '\x150', '\x156', '\a', '\x34', '\x2', '\x2', 
		'\x151', '\x156', '\a', '\x35', '\x2', '\x2', '\x152', '\x156', '\a', 
		'\x31', '\x2', '\x2', '\x153', '\x156', '\x5', '&', '\x14', '\x2', '\x154', 
		'\x156', '\x5', '\x34', '\x1B', '\x2', '\x155', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x150', '\x3', '\x2', '\x2', '\x2', '\x155', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x33', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x15A', '\x5', '\x36', '\x1C', '\x2', '\x158', '\x159', '\a', '#', '\x2', 
		'\x2', '\x159', '\x15B', '\x5', '\x36', '\x1C', '\x2', '\x15A', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x161', '\x5', 
		'<', '\x1F', '\x2', '\x15D', '\x15E', '\a', '\t', '\x2', '\x2', '\x15E', 
		'\x15F', '\x5', '\x30', '\x19', '\x2', '\x15F', '\x160', '\a', '\n', '\x2', 
		'\x2', '\x160', '\x162', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x37', '\x3', '\x2', '\x2', '\x2', '\x163', '\x16B', '\x5', 
		'<', '\x1F', '\x2', '\x164', '\x16B', '\a', ',', '\x2', '\x2', '\x165', 
		'\x16B', '\a', '\'', '\x2', '\x2', '\x166', '\x16B', '\a', '.', '\x2', 
		'\x2', '\x167', '\x16B', '\a', '*', '\x2', '\x2', '\x168', '\x16B', '\a', 
		')', '\x2', '\x2', '\x169', '\x16B', '\a', '\x30', '\x2', '\x2', '\x16A', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16D', '\a', '\x32', '\x2', '\x2', '\x16D', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\a', '\x32', '\x2', '\x2', '\x16F', '=', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x45', 'K', 'X', ']', '\x61', 'l', 'y', '\x7F', 
		'\x8C', '\x92', '\x9D', '\xA8', '\xAD', '\xB1', '\xC1', '\xD9', '\xDC', 
		'\xE7', '\xEF', '\xF1', '\xF5', '\x100', '\x109', '\x10C', '\x11E', '\x123', 
		'\x127', '\x132', '\x146', '\x148', '\x14D', '\x155', '\x15A', '\x161', 
		'\x16A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
