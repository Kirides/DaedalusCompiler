//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Daedalus.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DaedalusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, Const=34, Var=35, If=36, Int=37, Else=38, Func=39, 
		String=40, Class=41, Void=42, Return=43, Float=44, Prototype=45, Instance=46, 
		Null=47, Identifier=48, IntegerLiteral=49, FloatLiteral=50, StringLiteral=51, 
		Whitespace=52, Newline=53, BlockComment=54, LineComment=55;
	public const int
		RULE_daedalusFile = 0, RULE_functionDef = 1, RULE_constDef = 2, RULE_classDef = 3, 
		RULE_prototypeDef = 4, RULE_instanceDef = 5, RULE_instanceDecl = 6, RULE_varDecl = 7, 
		RULE_constArrayDef = 8, RULE_constArrayAssignment = 9, RULE_constValueDef = 10, 
		RULE_constValueAssignment = 11, RULE_varArrayDecl = 12, RULE_varValueDecl = 13, 
		RULE_parameterList = 14, RULE_parameterDecl = 15, RULE_statementBlock = 16, 
		RULE_statement = 17, RULE_funcCall = 18, RULE_assignment = 19, RULE_ifCondition = 20, 
		RULE_elseBlock = 21, RULE_elseIfBlock = 22, RULE_ifBlock = 23, RULE_ifBlockStatement = 24, 
		RULE_returnStatement = 25, RULE_funcArgExpression = 26, RULE_expressionBlock = 27, 
		RULE_expression = 28, RULE_simpleValue = 29, RULE_value = 30, RULE_complexReferenceLeftSide = 31, 
		RULE_complexReference = 32, RULE_complexReferenceNode = 33, RULE_typeReference = 34, 
		RULE_nameNode = 35, RULE_referenceNode = 36, RULE_assigmentOperator = 37, 
		RULE_addOperator = 38, RULE_bitMoveOperator = 39, RULE_compOperator = 40, 
		RULE_eqOperator = 41, RULE_oneArgOperator = 42, RULE_multOperator = 43, 
		RULE_binAndOperator = 44, RULE_binOrOperator = 45, RULE_logAndOperator = 46, 
		RULE_logOrOperator = 47;
	public static readonly string[] ruleNames = {
		"daedalusFile", "functionDef", "constDef", "classDef", "prototypeDef", 
		"instanceDef", "instanceDecl", "varDecl", "constArrayDef", "constArrayAssignment", 
		"constValueDef", "constValueAssignment", "varArrayDecl", "varValueDecl", 
		"parameterList", "parameterDecl", "statementBlock", "statement", "funcCall", 
		"assignment", "ifCondition", "elseBlock", "elseIfBlock", "ifBlock", "ifBlockStatement", 
		"returnStatement", "funcArgExpression", "expressionBlock", "expression", 
		"simpleValue", "value", "complexReferenceLeftSide", "complexReference", 
		"complexReferenceNode", "typeReference", "nameNode", "referenceNode", 
		"assigmentOperator", "addOperator", "bitMoveOperator", "compOperator", 
		"eqOperator", "oneArgOperator", "multOperator", "binAndOperator", "binOrOperator", 
		"logAndOperator", "logOrOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'{'", "'}'", "'('", "')'", "'['", "']'", "'='", "'.'", 
		"'+='", "'-='", "'*='", "'/='", "'+'", "'-'", "'<<'", "'>>'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'!'", "'~'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Const", "Var", 
		"If", "Int", "Else", "Func", "String", "Class", "Void", "Return", "Float", 
		"Prototype", "Instance", "Null", "Identifier", "IntegerLiteral", "FloatLiteral", 
		"StringLiteral", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Daedalus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DaedalusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DaedalusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DaedalusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DaedalusFileContext : ParserRuleContext {
		public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ConstDefContext[] constDef() {
			return GetRuleContexts<ConstDefContext>();
		}
		public ConstDefContext constDef(int i) {
			return GetRuleContext<ConstDefContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public PrototypeDefContext[] prototypeDef() {
			return GetRuleContexts<PrototypeDefContext>();
		}
		public PrototypeDefContext prototypeDef(int i) {
			return GetRuleContext<PrototypeDefContext>(i);
		}
		public InstanceDefContext[] instanceDef() {
			return GetRuleContexts<InstanceDefContext>();
		}
		public InstanceDefContext instanceDef(int i) {
			return GetRuleContext<InstanceDefContext>(i);
		}
		public InstanceDeclContext[] instanceDecl() {
			return GetRuleContexts<InstanceDeclContext>();
		}
		public InstanceDeclContext instanceDecl(int i) {
			return GetRuleContext<InstanceDeclContext>(i);
		}
		public DaedalusFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daedalusFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterDaedalusFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitDaedalusFile(this);
		}
	}

	[RuleVersion(0)]
	public DaedalusFileContext daedalusFile() {
		DaedalusFileContext _localctx = new DaedalusFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_daedalusFile);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 96; functionDef();
						}
						break;
					case 2:
						{
						State = 97; constDef();
						}
						break;
					case 3:
						{
						State = 98; varDecl();
						}
						break;
					case 4:
						{
						State = 99; classDef();
						}
						break;
					case 5:
						{
						State = 100; prototypeDef();
						}
						break;
					case 6:
						{
						State = 101; instanceDef();
						}
						break;
					case 7:
						{
						State = 102; instanceDecl();
						}
						break;
					}
					State = 105; Match(T__0);
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(Func);
			State = 113; typeReference();
			State = 114; nameNode();
			State = 115; parameterList();
			State = 116; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(DaedalusParser.Const, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ConstValueDefContext[] constValueDef() {
			return GetRuleContexts<ConstValueDefContext>();
		}
		public ConstValueDefContext constValueDef(int i) {
			return GetRuleContext<ConstValueDefContext>(i);
		}
		public ConstArrayDefContext[] constArrayDef() {
			return GetRuleContexts<ConstArrayDefContext>();
		}
		public ConstArrayDefContext constArrayDef(int i) {
			return GetRuleContext<ConstArrayDefContext>(i);
		}
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(Const);
			State = 119; typeReference();
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 120; constValueDef();
				}
				break;
			case 2:
				{
				State = 121; constArrayDef();
				}
				break;
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 124; Match(T__1);
				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 125; constValueDef();
					}
					break;
				case 2:
					{
					State = 126; constArrayDef();
					}
					break;
				}
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(DaedalusParser.Class, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(Class);
			State = 135; nameNode();
			State = 136; Match(T__2);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 137; varDecl();
					State = 138; Match(T__0);
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 145; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeDefContext : ParserRuleContext {
		public ITerminalNode Prototype() { return GetToken(DaedalusParser.Prototype, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public PrototypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterPrototypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitPrototypeDef(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeDefContext prototypeDef() {
		PrototypeDefContext _localctx = new PrototypeDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_prototypeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(Prototype);
			State = 148; nameNode();
			State = 149; Match(T__4);
			State = 150; referenceNode();
			State = 151; Match(T__5);
			State = 152; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDefContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public InstanceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDef(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDefContext instanceDef() {
		InstanceDefContext _localctx = new InstanceDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_instanceDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(Instance);
			State = 155; nameNode();
			State = 156; Match(T__4);
			State = 157; referenceNode();
			State = 158; Match(T__5);
			State = 159; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDeclContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public ReferenceNodeContext[] referenceNode() {
			return GetRuleContexts<ReferenceNodeContext>();
		}
		public ReferenceNodeContext referenceNode(int i) {
			return GetRuleContext<ReferenceNodeContext>(i);
		}
		public InstanceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDeclContext instanceDecl() {
		InstanceDeclContext _localctx = new InstanceDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_instanceDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(Instance);
			State = 162; nameNode();
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 163; Match(T__1);
					State = 164; referenceNode();
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 170; Match(T__4);
			State = 171; nameNode();
			State = 172; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VarValueDeclContext[] varValueDecl() {
			return GetRuleContexts<VarValueDeclContext>();
		}
		public VarValueDeclContext varValueDecl(int i) {
			return GetRuleContext<VarValueDeclContext>(i);
		}
		public VarArrayDeclContext[] varArrayDecl() {
			return GetRuleContexts<VarArrayDeclContext>();
		}
		public VarArrayDeclContext varArrayDecl(int i) {
			return GetRuleContext<VarArrayDeclContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(Var);
			State = 175; typeReference();
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 176; varValueDecl();
				}
				break;
			case 2:
				{
				State = 177; varArrayDecl();
				}
				break;
			}
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 180; Match(T__1);
				State = 183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 181; varValueDecl();
					}
					break;
				case 2:
					{
					State = 182; varArrayDecl();
					}
					break;
				}
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ConstArrayAssignmentContext constArrayAssignment() {
			return GetRuleContext<ConstArrayAssignmentContext>(0);
		}
		public ConstArrayDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayDefContext constArrayDef() {
		ConstArrayDefContext _localctx = new ConstArrayDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_constArrayDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; nameNode();
			State = 191; Match(T__6);
			State = 192; simpleValue();
			State = 193; Match(T__7);
			State = 194; constArrayAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayAssignmentContext : ParserRuleContext {
		public ExpressionBlockContext[] expressionBlock() {
			return GetRuleContexts<ExpressionBlockContext>();
		}
		public ExpressionBlockContext expressionBlock(int i) {
			return GetRuleContext<ExpressionBlockContext>(i);
		}
		public ConstArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayAssignmentContext constArrayAssignment() {
		ConstArrayAssignmentContext _localctx = new ConstArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_constArrayAssignment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__8);
			State = 197; Match(T__2);
			{
			State = 198; expressionBlock();
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 199; Match(T__1);
					State = 200; expressionBlock();
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
			State = 206; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ConstValueAssignmentContext constValueAssignment() {
			return GetRuleContext<ConstValueAssignmentContext>(0);
		}
		public ConstValueDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueDefContext constValueDef() {
		ConstValueDefContext _localctx = new ConstValueDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_constValueDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; nameNode();
			State = 209; constValueAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueAssignmentContext : ParserRuleContext {
		public ExpressionBlockContext expressionBlock() {
			return GetRuleContext<ExpressionBlockContext>(0);
		}
		public ConstValueAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueAssignmentContext constValueAssignment() {
		ConstValueAssignmentContext _localctx = new ConstValueAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_constValueAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(T__8);
			State = 212; expressionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarArrayDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public VarArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varArrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarArrayDeclContext varArrayDecl() {
		VarArrayDeclContext _localctx = new VarArrayDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_varArrayDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; nameNode();
			State = 215; Match(T__6);
			State = 216; simpleValue();
			State = 217; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarValueDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varValueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarValueDeclContext varValueDecl() {
		VarValueDeclContext _localctx = new VarValueDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_varValueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; nameNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__4);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 222; parameterDecl();
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 223; Match(T__1);
						State = 224; parameterDecl();
						}
						} 
					}
					State = 229;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 232; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(Var);
			State = 235; typeReference();
			State = 236; nameNode();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 237; Match(T__6);
				State = 238; simpleValue();
				State = 239; Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockStatementContext[] ifBlockStatement() {
			return GetRuleContexts<IfBlockStatementContext>();
		}
		public IfBlockStatementContext ifBlockStatement(int i) {
			return GetRuleContext<IfBlockStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_statementBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(T__2);
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 251;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__4:
					case T__14:
					case T__15:
					case T__24:
					case T__25:
					case Const:
					case Var:
					case Return:
					case Null:
					case Identifier:
					case IntegerLiteral:
					case FloatLiteral:
					case StringLiteral:
						{
						{
						State = 244; statement();
						State = 245; Match(T__0);
						}
						}
						break;
					case If:
						{
						{
						State = 247; ifBlockStatement();
						State = 249;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 248; Match(T__0);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 258; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262; constDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 263; varDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 264; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public FuncArgExpressionContext[] funcArgExpression() {
			return GetRuleContexts<FuncArgExpressionContext>();
		}
		public FuncArgExpressionContext funcArgExpression(int i) {
			return GetRuleContext<FuncArgExpressionContext>(i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; nameNode();
			State = 268; Match(T__4);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__14) | (1L << T__15) | (1L << T__24) | (1L << T__25) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 269; funcArgExpression();
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 270; Match(T__1);
						State = 271; funcArgExpression();
						}
						} 
					}
					State = 276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				}
			}

			State = 279; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ComplexReferenceLeftSideContext complexReferenceLeftSide() {
			return GetRuleContext<ComplexReferenceLeftSideContext>(0);
		}
		public AssigmentOperatorContext assigmentOperator() {
			return GetRuleContext<AssigmentOperatorContext>(0);
		}
		public ExpressionBlockContext expressionBlock() {
			return GetRuleContext<ExpressionBlockContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; complexReferenceLeftSide();
			State = 282; assigmentOperator();
			State = 283; expressionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ExpressionBlockContext expressionBlock() {
			return GetRuleContext<ExpressionBlockContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; expressionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(DaedalusParser.Else, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(Else);
			State = 288; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(DaedalusParser.Else, 0); }
		public ITerminalNode If() { return GetToken(DaedalusParser.If, 0); }
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(Else);
			State = 291; Match(If);
			State = 292; ifCondition();
			State = 293; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(DaedalusParser.If, 0); }
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(If);
			State = 296; ifCondition();
			State = 297; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStatementContext : ParserRuleContext {
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStatementContext ifBlockStatement() {
		IfBlockStatementContext _localctx = new IfBlockStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifBlockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; ifBlock();
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 300; elseIfBlock();
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 306; elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(DaedalusParser.Return, 0); }
		public ExpressionBlockContext expressionBlock() {
			return GetRuleContext<ExpressionBlockContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(Return);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__14) | (1L << T__15) | (1L << T__24) | (1L << T__25) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 310; expressionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgExpressionContext : ParserRuleContext {
		public ExpressionBlockContext expressionBlock() {
			return GetRuleContext<ExpressionBlockContext>(0);
		}
		public FuncArgExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArgExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncArgExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncArgExpression(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgExpressionContext funcArgExpression() {
		FuncArgExpressionContext _localctx = new FuncArgExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcArgExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; expressionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterExpressionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitExpressionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionBlockContext expressionBlock() {
		ExpressionBlockContext _localctx = new ExpressionBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_expressionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitMoveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitMoveOperatorContext bitMoveOperator() {
			return GetRuleContext<BitMoveOperatorContext>(0);
		}
		public BitMoveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBitMoveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBitMoveExpression(this);
		}
	}
	public partial class OneArgExpressionContext : ExpressionContext {
		public OneArgOperatorContext oneArgOperator() {
			return GetRuleContext<OneArgOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OneArgExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterOneArgExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitOneArgExpression(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqOperatorContext eqOperator() {
			return GetRuleContext<EqOperatorContext>(0);
		}
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
	}
	public partial class ValExpressionContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterValExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitValExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOperatorContext addOperator() {
			return GetRuleContext<AddOperatorContext>(0);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompOperatorContext compOperator() {
			return GetRuleContext<CompOperatorContext>(0);
		}
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterCompExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitCompExpression(this);
		}
	}
	public partial class LogOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogOrOperatorContext logOrOperator() {
			return GetRuleContext<LogOrOperatorContext>(0);
		}
		public LogOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterLogOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitLogOrExpression(this);
		}
	}
	public partial class BinAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinAndOperatorContext binAndOperator() {
			return GetRuleContext<BinAndOperatorContext>(0);
		}
		public BinAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBinAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBinAndExpression(this);
		}
	}
	public partial class BinOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinOrOperatorContext binOrOperator() {
			return GetRuleContext<BinOrOperatorContext>(0);
		}
		public BinOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBinOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBinOrExpression(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOperatorContext multOperator() {
			return GetRuleContext<MultOperatorContext>(0);
		}
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
	}
	public partial class BracketExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
	}
	public partial class LogAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogAndOperatorContext logAndOperator() {
			return GetRuleContext<LogAndOperatorContext>(0);
		}
		public LogAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterLogAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitLogAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new BracketExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 318; Match(T__4);
				State = 319; expression(0);
				State = 320; Match(T__5);
				}
				break;
			case T__14:
			case T__15:
			case T__24:
			case T__25:
				{
				_localctx = new OneArgExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 322; oneArgOperator();
				State = 323; expression(11);
				}
				break;
			case Null:
			case Identifier:
			case IntegerLiteral:
			case FloatLiteral:
			case StringLiteral:
				{
				_localctx = new ValExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 364;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 329; multOperator();
						State = 330; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 333; addOperator();
						State = 334; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new BitMoveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 337; bitMoveOperator();
						State = 338; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 341; compOperator();
						State = 342; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 344;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 345; eqOperator();
						State = 346; expression(7);
						}
						break;
					case 6:
						{
						_localctx = new BinAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 348;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 349; binAndOperator();
						State = 350; expression(6);
						}
						break;
					case 7:
						{
						_localctx = new BinOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 353; binOrOperator();
						State = 354; expression(5);
						}
						break;
					case 8:
						{
						_localctx = new LogAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 356;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 357; logAndOperator();
						State = 358; expression(4);
						}
						break;
					case 9:
						{
						_localctx = new LogOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 360;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 361; logOrOperator();
						State = 362; expression(3);
						}
						break;
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_simpleValue);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; Match(IntegerLiteral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; referenceNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerLiteralValueContext : ValueContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public IntegerLiteralValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIntegerLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIntegerLiteralValue(this);
		}
	}
	public partial class FloatLiteralValueContext : ValueContext {
		public ITerminalNode FloatLiteral() { return GetToken(DaedalusParser.FloatLiteral, 0); }
		public FloatLiteralValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFloatLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFloatLiteralValue(this);
		}
	}
	public partial class StringLiteralValueContext : ValueContext {
		public ITerminalNode StringLiteral() { return GetToken(DaedalusParser.StringLiteral, 0); }
		public StringLiteralValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStringLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStringLiteralValue(this);
		}
	}
	public partial class ComplexReferenceValueContext : ValueContext {
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ComplexReferenceValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceValue(this);
		}
	}
	public partial class NullLiteralValueContext : ValueContext {
		public ITerminalNode Null() { return GetToken(DaedalusParser.Null, 0); }
		public NullLiteralValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterNullLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitNullLiteralValue(this);
		}
	}
	public partial class FuncCallValueContext : ValueContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FuncCallValueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncCallValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncCallValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_value);
		try {
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new IntegerLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; Match(IntegerLiteral);
				}
				break;
			case 2:
				_localctx = new FloatLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; Match(FloatLiteral);
				}
				break;
			case 3:
				_localctx = new StringLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; Match(StringLiteral);
				}
				break;
			case 4:
				_localctx = new NullLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; Match(Null);
				}
				break;
			case 5:
				_localctx = new FuncCallValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 377; funcCall();
				}
				break;
			case 6:
				_localctx = new ComplexReferenceValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 378; complexReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceLeftSideContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceLeftSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceLeftSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceLeftSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceLeftSide(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceLeftSideContext complexReferenceLeftSide() {
		ComplexReferenceLeftSideContext _localctx = new ComplexReferenceLeftSideContext(Context, State);
		EnterRule(_localctx, 62, RULE_complexReferenceLeftSide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; complexReferenceNode();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 382; Match(T__9);
				State = 383; complexReferenceNode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReference(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceContext complexReference() {
		ComplexReferenceContext _localctx = new ComplexReferenceContext(Context, State);
		EnterRule(_localctx, 64, RULE_complexReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; complexReferenceNode();
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 387; Match(T__9);
				State = 388; complexReferenceNode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceNodeContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ComplexReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceNodeContext complexReferenceNode() {
		ComplexReferenceNodeContext _localctx = new ComplexReferenceNodeContext(Context, State);
		EnterRule(_localctx, 66, RULE_complexReferenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; referenceNode();
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 392; Match(T__6);
				State = 393; simpleValue();
				State = 394; Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public ITerminalNode Void() { return GetToken(DaedalusParser.Void, 0); }
		public ITerminalNode Int() { return GetToken(DaedalusParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(DaedalusParser.Float, 0); }
		public ITerminalNode String() { return GetToken(DaedalusParser.String, 0); }
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 398; referenceNode();
				}
				break;
			case Void:
				{
				State = 399; Match(Void);
				}
				break;
			case Int:
				{
				State = 400; Match(Int);
				}
				break;
			case Float:
				{
				State = 401; Match(Float);
				}
				break;
			case String:
				{
				State = 402; Match(String);
				}
				break;
			case Func:
				{
				State = 403; Match(Func);
				}
				break;
			case Instance:
				{
				State = 404; Match(Instance);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public NameNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterNameNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitNameNode(this);
		}
	}

	[RuleVersion(0)]
	public NameNodeContext nameNode() {
		NameNodeContext _localctx = new NameNodeContext(Context, State);
		EnterRule(_localctx, 70, RULE_nameNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public ReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNodeContext referenceNode() {
		ReferenceNodeContext _localctx = new ReferenceNodeContext(Context, State);
		EnterRule(_localctx, 72, RULE_referenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmentOperatorContext : ParserRuleContext {
		public AssigmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssigmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssigmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssigmentOperatorContext assigmentOperator() {
		AssigmentOperatorContext _localctx = new AssigmentOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_assigmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorContext : ParserRuleContext {
		public AddOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAddOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAddOperator(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorContext addOperator() {
		AddOperatorContext _localctx = new AddOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_addOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitMoveOperatorContext : ParserRuleContext {
		public BitMoveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitMoveOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBitMoveOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBitMoveOperator(this);
		}
	}

	[RuleVersion(0)]
	public BitMoveOperatorContext bitMoveOperator() {
		BitMoveOperatorContext _localctx = new BitMoveOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_bitMoveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !(_la==T__16 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompOperatorContext : ParserRuleContext {
		public CompOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterCompOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitCompOperator(this);
		}
	}

	[RuleVersion(0)]
	public CompOperatorContext compOperator() {
		CompOperatorContext _localctx = new CompOperatorContext(Context, State);
		EnterRule(_localctx, 80, RULE_compOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqOperatorContext : ParserRuleContext {
		public EqOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterEqOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitEqOperator(this);
		}
	}

	[RuleVersion(0)]
	public EqOperatorContext eqOperator() {
		EqOperatorContext _localctx = new EqOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_eqOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneArgOperatorContext : ParserRuleContext {
		public OneArgOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneArgOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterOneArgOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitOneArgOperator(this);
		}
	}

	[RuleVersion(0)]
	public OneArgOperatorContext oneArgOperator() {
		OneArgOperatorContext _localctx = new OneArgOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_oneArgOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOperatorContext : ParserRuleContext {
		public MultOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterMultOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitMultOperator(this);
		}
	}

	[RuleVersion(0)]
	public MultOperatorContext multOperator() {
		MultOperatorContext _localctx = new MultOperatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_multOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinAndOperatorContext : ParserRuleContext {
		public BinAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binAndOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBinAndOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBinAndOperator(this);
		}
	}

	[RuleVersion(0)]
	public BinAndOperatorContext binAndOperator() {
		BinAndOperatorContext _localctx = new BinAndOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_binAndOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinOrOperatorContext : ParserRuleContext {
		public BinOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binOrOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBinOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBinOrOperator(this);
		}
	}

	[RuleVersion(0)]
	public BinOrOperatorContext binOrOperator() {
		BinOrOperatorContext _localctx = new BinOrOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_binOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogAndOperatorContext : ParserRuleContext {
		public LogAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logAndOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterLogAndOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitLogAndOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogAndOperatorContext logAndOperator() {
		LogAndOperatorContext _localctx = new LogAndOperatorContext(Context, State);
		EnterRule(_localctx, 92, RULE_logAndOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogOrOperatorContext : ParserRuleContext {
		public LogOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logOrOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterLogOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitLogOrOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogOrOperatorContext logOrOperator() {
		LogOrOperatorContext _localctx = new LogOrOperatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_logOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x1B4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 'j', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', 'n', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'q', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '}', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x82', '\n', '\x4', '\a', '\x4', '\x84', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x87', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x8F', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x92', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xA8', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\xAB', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xB5', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xBA', '\n', '\t', '\a', '\t', '\xBC', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\xBF', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xCC', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xCF', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\xE4', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xE7', '\v', '\x10', '\x5', '\x10', '\xE9', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xF4', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xFC', '\n', '\x12', 
		'\x5', '\x12', '\xFE', '\n', '\x12', '\a', '\x12', '\x100', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x103', '\v', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x10C', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x113', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x116', '\v', '\x14', '\x5', '\x14', 
		'\x118', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x130', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x133', '\v', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x136', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x13A', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x149', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x16F', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x172', '\v', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x176', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x17E', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x183', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x188', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x18F', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x198', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\n', 'o', '\x90', 
		'\xA9', '\xCD', '\xE5', '\x101', '\x114', '\x131', '\x3', ':', '\x32', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x2', '\t', '\x4', '\x2', '\v', '\v', '\r', '\x10', '\x3', 
		'\x2', '\x11', '\x12', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x15', 
		'\x18', '\x3', '\x2', '\x19', '\x1A', '\x4', '\x2', '\x11', '\x12', '\x1B', 
		'\x1C', '\x3', '\x2', '\x1D', '\x1F', '\x2', '\x1BC', '\x2', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'r', '\x3', '\x2', '\x2', '\x2', '\x6', 'x', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x95', '\x3', '\x2', '\x2', '\x2', '\f', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xDF', '\x3', '\x2', '\x2', '\x2', ' ', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xF5', '\x3', '\x2', '\x2', '\x2', '$', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x11B', '\x3', '\x2', '\x2', '\x2', '*', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x121', '\x3', '\x2', '\x2', '\x2', '.', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x175', '\x3', '\x2', '\x2', '\x2', '>', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x42', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x197', '\x3', '\x2', '\x2', '\x2', 'H', '\x199', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x19B', '\x3', '\x2', '\x2', '\x2', 'L', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1A1', '\x3', '\x2', '\x2', '\x2', 'R', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'V', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\\', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1AF', '\x3', '\x2', '\x2', '\x2', '`', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x62', 'j', '\x5', '\x4', '\x3', '\x2', '\x63', 
		'j', '\x5', '\x6', '\x4', '\x2', '\x64', 'j', '\x5', '\x10', '\t', '\x2', 
		'\x65', 'j', '\x5', '\b', '\x5', '\x2', '\x66', 'j', '\x5', '\n', '\x6', 
		'\x2', 'g', 'j', '\x5', '\f', '\a', '\x2', 'h', 'j', '\x5', '\xE', '\b', 
		'\x2', 'i', '\x62', '\x3', '\x2', '\x2', '\x2', 'i', '\x63', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x64', '\x3', '\x2', '\x2', '\x2', 'i', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 
		'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x3', '\x2', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'i', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', ')', '\x2', 
		'\x2', 's', 't', '\x5', '\x46', '$', '\x2', 't', 'u', '\x5', 'H', '%', 
		'\x2', 'u', 'v', '\x5', '\x1E', '\x10', '\x2', 'v', 'w', '\x5', '\"', 
		'\x12', '\x2', 'w', '\x5', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 
		'$', '\x2', '\x2', 'y', '|', '\x5', '\x46', '$', '\x2', 'z', '}', '\x5', 
		'\x16', '\f', '\x2', '{', '}', '\x5', '\x12', '\n', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x81', '\a', '\x4', '\x2', '\x2', '\x7F', 
		'\x82', '\x5', '\x16', '\f', '\x2', '\x80', '\x82', '\x5', '\x12', '\n', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\a', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '+', '\x2', 
		'\x2', '\x89', '\x8A', '\x5', 'H', '%', '\x2', '\x8A', '\x90', '\a', '\x5', 
		'\x2', '\x2', '\x8B', '\x8C', '\x5', '\x10', '\t', '\x2', '\x8C', '\x8D', 
		'\a', '\x3', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x6', 
		'\x2', '\x2', '\x94', '\t', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\a', '/', '\x2', '\x2', '\x96', '\x97', '\x5', 'H', '%', '\x2', '\x97', 
		'\x98', '\a', '\a', '\x2', '\x2', '\x98', '\x99', '\x5', 'J', '&', '\x2', 
		'\x99', '\x9A', '\a', '\b', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\"', 
		'\x12', '\x2', '\x9B', '\v', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\x30', '\x2', '\x2', '\x9D', '\x9E', '\x5', 'H', '%', '\x2', '\x9E', 
		'\x9F', '\a', '\a', '\x2', '\x2', '\x9F', '\xA0', '\x5', 'J', '&', '\x2', 
		'\xA0', '\xA1', '\a', '\b', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\"', 
		'\x12', '\x2', '\xA2', '\r', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', 
		'\a', '\x30', '\x2', '\x2', '\xA4', '\xA9', '\x5', 'H', '%', '\x2', '\xA5', 
		'\xA6', '\a', '\x4', '\x2', '\x2', '\xA6', '\xA8', '\x5', 'J', '&', '\x2', 
		'\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\a', 
		'\x2', '\x2', '\xAD', '\xAE', '\x5', 'H', '%', '\x2', '\xAE', '\xAF', 
		'\a', '\b', '\x2', '\x2', '\xAF', '\xF', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '%', '\x2', '\x2', '\xB1', '\xB4', '\x5', '\x46', '$', '\x2', 
		'\xB2', '\xB5', '\x5', '\x1C', '\xF', '\x2', '\xB3', '\xB5', '\x5', '\x1A', 
		'\xE', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB9', '\a', '\x4', '\x2', '\x2', '\xB7', '\xBA', '\x5', '\x1C', 
		'\xF', '\x2', '\xB8', '\xBA', '\x5', '\x1A', '\xE', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x5', 'H', '%', '\x2', '\xC1', '\xC2', 
		'\a', '\t', '\x2', '\x2', '\xC2', '\xC3', '\x5', '<', '\x1F', '\x2', '\xC3', 
		'\xC4', '\a', '\n', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x14', '\v', 
		'\x2', '\xC5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\v', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x5', '\x2', '\x2', '\xC8', 
		'\xCD', '\x5', '\x38', '\x1D', '\x2', '\xC9', '\xCA', '\a', '\x4', '\x2', 
		'\x2', '\xCA', '\xCC', '\x5', '\x38', '\x1D', '\x2', '\xCB', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x6', '\x2', '\x2', '\xD1', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x5', 'H', '%', '\x2', 
		'\xD3', '\xD4', '\x5', '\x18', '\r', '\x2', '\xD4', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\a', '\v', '\x2', '\x2', '\xD6', '\xD7', 
		'\x5', '\x38', '\x1D', '\x2', '\xD7', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', 'H', '%', '\x2', '\xD9', '\xDA', '\a', '\t', '\x2', 
		'\x2', '\xDA', '\xDB', '\x5', '<', '\x1F', '\x2', '\xDB', '\xDC', '\a', 
		'\n', '\x2', '\x2', '\xDC', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x5', 'H', '%', '\x2', '\xDE', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE8', '\a', '\a', '\x2', '\x2', '\xE0', '\xE5', '\x5', ' ', 
		'\x11', '\x2', '\xE1', '\xE2', '\a', '\x4', '\x2', '\x2', '\xE2', '\xE4', 
		'\x5', ' ', '\x11', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', '\b', '\x2', '\x2', '\xEB', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '%', '\x2', '\x2', '\xED', '\xEE', '\x5', '\x46', 
		'$', '\x2', '\xEE', '\xF3', '\x5', 'H', '%', '\x2', '\xEF', '\xF0', '\a', 
		'\t', '\x2', '\x2', '\xF0', '\xF1', '\x5', '<', '\x1F', '\x2', '\xF1', 
		'\xF2', '\a', '\n', '\x2', '\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '!', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\x101', '\a', '\x5', '\x2', '\x2', '\xF6', '\xF7', '\x5', '$', '\x13', 
		'\x2', '\xF7', '\xF8', '\a', '\x3', '\x2', '\x2', '\xF8', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFB', '\x5', '\x32', '\x1A', '\x2', '\xFA', 
		'\xFC', '\a', '\x3', '\x2', '\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\a', '\x6', '\x2', '\x2', '\x105', '#', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x10C', '\x5', '(', '\x15', '\x2', '\x107', '\x10C', '\x5', '\x34', '\x1B', 
		'\x2', '\x108', '\x10C', '\x5', '\x6', '\x4', '\x2', '\x109', '\x10C', 
		'\x5', '\x10', '\t', '\x2', '\x10A', '\x10C', '\x5', ':', '\x1E', '\x2', 
		'\x10B', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '%', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x5', 
		'H', '%', '\x2', '\x10E', '\x117', '\a', '\a', '\x2', '\x2', '\x10F', 
		'\x114', '\x5', '\x36', '\x1C', '\x2', '\x110', '\x111', '\a', '\x4', 
		'\x2', '\x2', '\x111', '\x113', '\x5', '\x36', '\x1C', '\x2', '\x112', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\b', '\x2', 
		'\x2', '\x11A', '\'', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 
		'@', '!', '\x2', '\x11C', '\x11D', '\x5', 'L', '\'', '\x2', '\x11D', '\x11E', 
		'\x5', '\x38', '\x1D', '\x2', '\x11E', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\x5', '\x38', '\x1D', '\x2', '\x120', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x122', '\a', '(', '\x2', '\x2', '\x122', '\x123', 
		'\x5', '\"', '\x12', '\x2', '\x123', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\a', '(', '\x2', '\x2', '\x125', '\x126', '\a', '&', 
		'\x2', '\x2', '\x126', '\x127', '\x5', '*', '\x16', '\x2', '\x127', '\x128', 
		'\x5', '\"', '\x12', '\x2', '\x128', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\a', '&', '\x2', '\x2', '\x12A', '\x12B', '\x5', '*', 
		'\x16', '\x2', '\x12B', '\x12C', '\x5', '\"', '\x12', '\x2', '\x12C', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x131', '\x5', '\x30', '\x19', 
		'\x2', '\x12E', '\x130', '\x5', '.', '\x18', '\x2', '\x12F', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x135', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x5', ',', '\x17', 
		'\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x139', '\a', '-', '\x2', '\x2', '\x138', '\x13A', '\x5', '\x38', 
		'\x1D', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x5', '\x38', '\x1D', '\x2', '\x13C', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x5', ':', '\x1E', '\x2', 
		'\x13E', '\x39', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\b', '\x1E', 
		'\x1', '\x2', '\x140', '\x141', '\a', '\a', '\x2', '\x2', '\x141', '\x142', 
		'\x5', ':', '\x1E', '\x2', '\x142', '\x143', '\a', '\b', '\x2', '\x2', 
		'\x143', '\x149', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x5', 
		'V', ',', '\x2', '\x145', '\x146', '\x5', ':', '\x1E', '\r', '\x146', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\x5', '>', ' ', 
		'\x2', '\x148', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x148', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x170', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\f', 
		'\f', '\x2', '\x2', '\x14B', '\x14C', '\x5', 'X', '-', '\x2', '\x14C', 
		'\x14D', '\x5', ':', '\x1E', '\r', '\x14D', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\f', '\v', '\x2', '\x2', '\x14F', '\x150', '\x5', 
		'N', '(', '\x2', '\x150', '\x151', '\x5', ':', '\x1E', '\f', '\x151', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\f', '\n', '\x2', 
		'\x2', '\x153', '\x154', '\x5', 'P', ')', '\x2', '\x154', '\x155', '\x5', 
		':', '\x1E', '\v', '\x155', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\f', '\t', '\x2', '\x2', '\x157', '\x158', '\x5', 'R', '*', 
		'\x2', '\x158', '\x159', '\x5', ':', '\x1E', '\n', '\x159', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15B', '\f', '\b', '\x2', '\x2', '\x15B', 
		'\x15C', '\x5', 'T', '+', '\x2', '\x15C', '\x15D', '\x5', ':', '\x1E', 
		'\t', '\x15D', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', 
		'\f', '\a', '\x2', '\x2', '\x15F', '\x160', '\x5', 'Z', '.', '\x2', '\x160', 
		'\x161', '\x5', ':', '\x1E', '\b', '\x161', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x163', '\f', '\x6', '\x2', '\x2', '\x163', '\x164', 
		'\x5', '\\', '/', '\x2', '\x164', '\x165', '\x5', ':', '\x1E', '\a', '\x165', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\f', '\x5', '\x2', 
		'\x2', '\x167', '\x168', '\x5', '^', '\x30', '\x2', '\x168', '\x169', 
		'\x5', ':', '\x1E', '\x6', '\x169', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\f', '\x4', '\x2', '\x2', '\x16B', '\x16C', '\x5', 
		'`', '\x31', '\x2', '\x16C', '\x16D', '\x5', ':', '\x1E', '\x5', '\x16D', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x162', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x171', ';', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', 
		'\x2', '\x2', '\x173', '\x176', '\a', '\x33', '\x2', '\x2', '\x174', '\x176', 
		'\x5', 'J', '&', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x177', '\x17E', '\a', '\x33', '\x2', '\x2', '\x178', '\x17E', 
		'\a', '\x34', '\x2', '\x2', '\x179', '\x17E', '\a', '\x35', '\x2', '\x2', 
		'\x17A', '\x17E', '\a', '\x31', '\x2', '\x2', '\x17B', '\x17E', '\x5', 
		'&', '\x14', '\x2', '\x17C', '\x17E', '\x5', '\x42', '\"', '\x2', '\x17D', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x17F', '\x182', '\x5', '\x44', '#', '\x2', '\x180', '\x181', 
		'\a', '\f', '\x2', '\x2', '\x181', '\x183', '\x5', '\x44', '#', '\x2', 
		'\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x41', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x187', '\x5', '\x44', '#', '\x2', '\x185', '\x186', '\a', '\f', '\x2', 
		'\x2', '\x186', '\x188', '\x5', '\x44', '#', '\x2', '\x187', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x43', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18E', '\x5', 
		'J', '&', '\x2', '\x18A', '\x18B', '\a', '\t', '\x2', '\x2', '\x18B', 
		'\x18C', '\x5', '<', '\x1F', '\x2', '\x18C', '\x18D', '\a', '\n', '\x2', 
		'\x2', '\x18D', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x45', '\x3', '\x2', '\x2', '\x2', '\x190', '\x198', '\x5', 
		'J', '&', '\x2', '\x191', '\x198', '\a', ',', '\x2', '\x2', '\x192', '\x198', 
		'\a', '\'', '\x2', '\x2', '\x193', '\x198', '\a', '.', '\x2', '\x2', '\x194', 
		'\x198', '\a', '*', '\x2', '\x2', '\x195', '\x198', '\a', ')', '\x2', 
		'\x2', '\x196', '\x198', '\a', '\x30', '\x2', '\x2', '\x197', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x192', '\x3', '\x2', '\x2', '\x2', '\x197', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x194', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x198', 'G', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', 
		'\x32', '\x2', '\x2', '\x19A', 'I', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19C', '\a', '\x32', '\x2', '\x2', '\x19C', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\t', '\x2', '\x2', '\x2', '\x19E', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A0', '\t', '\x3', '\x2', '\x2', '\x1A0', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\t', '\x4', '\x2', 
		'\x2', '\x1A2', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\t', 
		'\x5', '\x2', '\x2', '\x1A4', 'S', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\t', '\x6', '\x2', '\x2', '\x1A6', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\t', '\a', '\x2', '\x2', '\x1A8', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\t', '\b', '\x2', '\x2', '\x1AA', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', ' ', '\x2', '\x2', 
		'\x1AC', '[', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '!', 
		'\x2', '\x2', '\x1AE', ']', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\a', '\"', '\x2', '\x2', '\x1B0', '_', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\a', '#', '\x2', '\x2', '\x1B2', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\"', 'i', 'o', '|', '\x81', '\x85', '\x90', '\xA9', '\xB4', '\xB9', 
		'\xBD', '\xCD', '\xE5', '\xE8', '\xF3', '\xFB', '\xFD', '\x101', '\x10B', 
		'\x114', '\x117', '\x131', '\x135', '\x139', '\x148', '\x16E', '\x170', 
		'\x175', '\x17D', '\x182', '\x187', '\x18E', '\x197',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
