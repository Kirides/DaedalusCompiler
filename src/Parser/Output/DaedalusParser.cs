//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/grzeg/Source/Repos/DaedalusCompiler/src/Parser\Daedalus.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DaedalusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, Const=34, Var=35, If=36, Int=37, Else=38, Func=39, 
		String=40, Class=41, Void=42, Return=43, Float=44, Prototype=45, Instance=46, 
		Null=47, Identifier=48, IntegerLiteral=49, FloatLiteral=50, StringLiteral=51, 
		Whitespace=52, Newline=53, BlockComment=54, LineComment=55;
	public const int
		RULE_daedalusFile = 0, RULE_functionDef = 1, RULE_constDef = 2, RULE_classDef = 3, 
		RULE_prototypeDef = 4, RULE_instanceDef = 5, RULE_instanceDecl = 6, RULE_varDecl = 7, 
		RULE_parameterList = 8, RULE_parameterDecl = 9, RULE_statementBlock = 10, 
		RULE_statement = 11, RULE_funcCall = 12, RULE_assignment = 13, RULE_ifBlock = 14, 
		RULE_returnStatement = 15, RULE_constAssignment = 16, RULE_arrayLiteral = 17, 
		RULE_expression = 18, RULE_simpleValue = 19, RULE_value = 20, RULE_complexReference = 21, 
		RULE_complexReferenceNode = 22, RULE_typeReference = 23, RULE_nameNode = 24;
	public static readonly string[] ruleNames = {
		"daedalusFile", "functionDef", "constDef", "classDef", "prototypeDef", 
		"instanceDef", "instanceDecl", "varDecl", "parameterList", "parameterDecl", 
		"statementBlock", "statement", "funcCall", "assignment", "ifBlock", "returnStatement", 
		"constAssignment", "arrayLiteral", "expression", "simpleValue", "value", 
		"complexReference", "complexReferenceNode", "typeReference", "nameNode"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'-'", "'!'", "'~'", "'+'", "'*'", "'/'", "'%'", 
		"'<<'", "'>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&'", "'|'", 
		"'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Const", "Var", 
		"If", "Int", "Else", "Func", "String", "Class", "Void", "Return", "Float", 
		"Prototype", "Instance", "Null", "Identifier", "IntegerLiteral", "FloatLiteral", 
		"StringLiteral", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Daedalus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DaedalusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DaedalusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DaedalusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DaedalusFileContext : ParserRuleContext {
		public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ConstDefContext[] constDef() {
			return GetRuleContexts<ConstDefContext>();
		}
		public ConstDefContext constDef(int i) {
			return GetRuleContext<ConstDefContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public PrototypeDefContext[] prototypeDef() {
			return GetRuleContexts<PrototypeDefContext>();
		}
		public PrototypeDefContext prototypeDef(int i) {
			return GetRuleContext<PrototypeDefContext>(i);
		}
		public InstanceDefContext[] instanceDef() {
			return GetRuleContexts<InstanceDefContext>();
		}
		public InstanceDefContext instanceDef(int i) {
			return GetRuleContext<InstanceDefContext>(i);
		}
		public InstanceDeclContext[] instanceDecl() {
			return GetRuleContexts<InstanceDeclContext>();
		}
		public InstanceDeclContext instanceDecl(int i) {
			return GetRuleContext<InstanceDeclContext>(i);
		}
		public DaedalusFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daedalusFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterDaedalusFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitDaedalusFile(this);
		}
	}

	[RuleVersion(0)]
	public DaedalusFileContext daedalusFile() {
		DaedalusFileContext _localctx = new DaedalusFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_daedalusFile);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 57;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 50; functionDef();
						}
						break;
					case 2:
						{
						State = 51; constDef();
						}
						break;
					case 3:
						{
						State = 52; varDecl();
						}
						break;
					case 4:
						{
						State = 53; classDef();
						}
						break;
					case 5:
						{
						State = 54; prototypeDef();
						}
						break;
					case 6:
						{
						State = 55; instanceDef();
						}
						break;
					case 7:
						{
						State = 56; instanceDecl();
						}
						break;
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(Func);
			State = 63; typeReference();
			State = 64; nameNode();
			State = 65; parameterList();
			State = 66; statementBlock();
			State = 67; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(DaedalusParser.Const, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ConstAssignmentContext constAssignment() {
			return GetRuleContext<ConstAssignmentContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(Const);
			State = 70; typeReference();
			State = 71; nameNode();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 72; Match(T__1);
				State = 73; simpleValue();
				State = 74; Match(T__2);
				}
			}

			State = 78; constAssignment();
			State = 79; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(DaedalusParser.Class, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(Class);
			State = 82; nameNode();
			State = 83; Match(T__3);
			State = 89;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 84; varDecl();
					State = 85; Match(T__0);
					}
					} 
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 92; Match(T__4);
			State = 93; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeDefContext : ParserRuleContext {
		public ITerminalNode Prototype() { return GetToken(DaedalusParser.Prototype, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public PrototypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterPrototypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitPrototypeDef(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeDefContext prototypeDef() {
		PrototypeDefContext _localctx = new PrototypeDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_prototypeDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(Prototype);
			State = 96; nameNode();
			State = 97; Match(T__5);
			State = 98; nameNode();
			State = 99; Match(T__6);
			State = 100; Match(T__3);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 101; assignment();
						}
						break;
					case 2:
						{
						State = 102; funcCall();
						}
						break;
					}
					State = 105; Match(T__0);
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 112; Match(T__4);
			State = 113; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDefContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public InstanceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDef(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDefContext instanceDef() {
		InstanceDefContext _localctx = new InstanceDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_instanceDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(Instance);
			State = 116; nameNode();
			State = 117; Match(T__5);
			State = 118; nameNode();
			State = 119; Match(T__6);
			State = 120; Match(T__3);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 123;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 121; assignment();
						}
						break;
					case 2:
						{
						State = 122; funcCall();
						}
						break;
					}
					State = 125; Match(T__0);
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 132; Match(T__4);
			State = 133; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDeclContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public InstanceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDeclContext instanceDecl() {
		InstanceDeclContext _localctx = new InstanceDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_instanceDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(Instance);
			State = 136; nameNode();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 137; Match(T__7);
					State = 138; nameNode();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 144; Match(T__5);
			State = 145; nameNode();
			State = 146; Match(T__6);
			State = 147; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(Var);
			State = 150; typeReference();
			State = 151; nameNode();
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 152; Match(T__1);
				State = 153; simpleValue();
				State = 154; Match(T__2);
				}
				}
				break;
			case 2:
				{
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 156; Match(T__7);
					State = 157; nameNode();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 165; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__5);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 168; parameterDecl();
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 169; Match(T__7);
						State = 170; parameterDecl();
						}
						} 
					}
					State = 175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 178; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(Var);
			State = 181; typeReference();
			State = 182; nameNode();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 183; Match(T__1);
				State = 184; simpleValue();
				State = 185; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(T__3);
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__5:
					case T__13:
					case T__14:
					case T__15:
					case T__16:
					case Const:
					case Var:
					case Return:
					case Null:
					case Identifier:
					case IntegerLiteral:
					case FloatLiteral:
					case StringLiteral:
						{
						{
						State = 190; statement();
						State = 191; Match(T__0);
						}
						}
						break;
					case If:
						{
						{
						State = 193; ifBlock();
						State = 195;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 194; Match(T__0);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 204; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; funcCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209; constDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 210; varDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 211; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; nameNode();
			State = 215; Match(T__5);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 216; expression(0);
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 217; Match(T__7);
						State = 218; expression(0);
						}
						} 
					}
					State = 223;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				}
			}

			State = 226; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; complexReference();
			State = 229;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 230; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode[] If() { return GetTokens(DaedalusParser.If); }
		public ITerminalNode If(int i) {
			return GetToken(DaedalusParser.If, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(DaedalusParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(DaedalusParser.Else, i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(If);
			State = 233; expression(0);
			State = 234; statementBlock();
			State = 242;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 235; Match(Else);
					State = 236; Match(If);
					State = 237; expression(0);
					State = 238; statementBlock();
					}
					} 
				}
				State = 244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 245; Match(Else);
				State = 246; statementBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(DaedalusParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(Return);
			{
			State = 250; expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ConstAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstAssignmentContext constAssignment() {
		ConstAssignmentContext _localctx = new ConstAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_constAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(T__8);
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case Null:
			case Identifier:
			case IntegerLiteral:
			case FloatLiteral:
			case StringLiteral:
				{
				State = 253; expression(0);
				}
				break;
			case T__3:
				{
				State = 254; arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(T__3);
			{
			State = 258; expression(0);
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 259; Match(T__7);
					State = 260; expression(0);
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
			State = 266; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 269; Match(T__5);
				State = 270; expression(0);
				State = 271; Match(T__6);
				}
				break;
			case 2:
				{
				State = 273;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 274; expression(9);
				}
				break;
			case 3:
				{
				State = 275; value();
				}
				break;
			case 4:
				{
				State = 276; nameNode();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 279;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 280;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 281; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 282;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 283;
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 284; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 286;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 287; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 288;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 289;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 290; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 292;
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__27) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 293; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 294;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 295;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 296; expression(4);
						}
						break;
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_simpleValue);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; Match(IntegerLiteral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; nameNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(DaedalusParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(DaedalusParser.StringLiteral, 0); }
		public ITerminalNode Null() { return GetToken(DaedalusParser.Null, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_value);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(IntegerLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; Match(FloatLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309; Match(Null);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 310; funcCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 311; complexReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReference(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceContext complexReference() {
		ComplexReferenceContext _localctx = new ComplexReferenceContext(Context, State);
		EnterRule(_localctx, 42, RULE_complexReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; complexReferenceNode();
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 315; Match(T__32);
				State = 316; complexReferenceNode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceNodeContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ComplexReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceNodeContext complexReferenceNode() {
		ComplexReferenceNodeContext _localctx = new ComplexReferenceNodeContext(Context, State);
		EnterRule(_localctx, 44, RULE_complexReferenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; nameNode();
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 320; Match(T__1);
				State = 321; simpleValue();
				State = 322; Match(T__2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ITerminalNode Void() { return GetToken(DaedalusParser.Void, 0); }
		public ITerminalNode Int() { return GetToken(DaedalusParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(DaedalusParser.Float, 0); }
		public ITerminalNode String() { return GetToken(DaedalusParser.String, 0); }
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 326; nameNode();
				}
				break;
			case Void:
				{
				State = 327; Match(Void);
				}
				break;
			case Int:
				{
				State = 328; Match(Int);
				}
				break;
			case Float:
				{
				State = 329; Match(Float);
				}
				break;
			case String:
				{
				State = 330; Match(String);
				}
				break;
			case Func:
				{
				State = 331; Match(Func);
				}
				break;
			case Instance:
				{
				State = 332; Match(Instance);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public NameNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterNameNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitNameNode(this);
		}
	}

	[RuleVersion(0)]
	public NameNodeContext nameNode() {
		NameNodeContext _localctx = new NameNodeContext(Context, State);
		EnterRule(_localctx, 48, RULE_nameNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x154', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '?', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'O', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'Z', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', ']', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'j', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'n', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'q', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x82', '\n', '\a', '\f', '\a', '\xE', '\a', '\x85', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x8E', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x91', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\xA1', '\n', '\t', '\f', '\t', '\xE', '\t', '\xA4', 
		'\v', '\t', '\x5', '\t', '\xA6', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xAE', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xB1', '\v', '\n', '\x5', '\n', 
		'\xB3', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xBE', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xC6', '\n', '\f', '\x5', 
		'\f', '\xC8', '\n', '\f', '\a', '\f', '\xCA', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xCD', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xD7', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xDE', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xE1', '\v', '\xE', '\x5', '\xE', '\xE3', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xF3', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xF6', '\v', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xFA', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x102', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x108', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x10B', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x118', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x12C', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x12F', '\v', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x133', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x13B', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x140', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x147', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x150', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\f', '=', '[', 'o', 
		'\x83', '\x8F', '\xAF', '\xCB', '\xDF', '\xF4', '\x109', '\x3', '&', '\x1B', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x2', '\n', '\x3', '\x2', '\v', '\xF', '\x3', 
		'\x2', '\x10', '\x13', '\x3', '\x2', '\x14', '\x16', '\x4', '\x2', '\x10', 
		'\x10', '\x13', '\x13', '\x3', '\x2', '\x17', '\x18', '\x3', '\x2', '\x19', 
		'\x1C', '\x3', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x1F', '\"', '\x2', 
		'\x173', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'G', '\x3', '\x2', '\x2', '\x2', '\b', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x61', '\x3', '\x2', '\x2', '\x2', '\f', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x97', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xEA', '\x3', '\x2', '\x2', '\x2', ' ', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x103', '\x3', '\x2', '\x2', '\x2', '&', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x132', '\x3', '\x2', '\x2', '\x2', '*', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x141', '\x3', '\x2', '\x2', '\x2', '\x30', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x151', '\x3', '\x2', '\x2', '\x2', '\x34', '<', 
		'\x5', '\x4', '\x3', '\x2', '\x35', '<', '\x5', '\x6', '\x4', '\x2', '\x36', 
		'<', '\x5', '\x10', '\t', '\x2', '\x37', '<', '\x5', '\b', '\x5', '\x2', 
		'\x38', '<', '\x5', '\n', '\x6', '\x2', '\x39', '<', '\x5', '\f', '\a', 
		'\x2', ':', '<', '\x5', '\xE', '\b', '\x2', ';', '\x34', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', '\x36', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x37', '\x3', '\x2', '\x2', '\x2', ';', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', ')', '\x2', '\x2', '\x41', '\x42', '\x5', '\x30', 
		'\x19', '\x2', '\x42', '\x43', '\x5', '\x32', '\x1A', '\x2', '\x43', '\x44', 
		'\x5', '\x12', '\n', '\x2', '\x44', '\x45', '\x5', '\x16', '\f', '\x2', 
		'\x45', '\x46', '\a', '\x3', '\x2', '\x2', '\x46', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\a', '$', '\x2', '\x2', 'H', 'I', '\x5', '\x30', 
		'\x19', '\x2', 'I', 'N', '\x5', '\x32', '\x1A', '\x2', 'J', 'K', '\a', 
		'\x4', '\x2', '\x2', 'K', 'L', '\x5', '(', '\x15', '\x2', 'L', 'M', '\a', 
		'\x5', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\"', '\x12', '\x2', 'Q', 'R', '\a', 
		'\x3', '\x2', '\x2', 'R', '\a', '\x3', '\x2', '\x2', '\x2', 'S', 'T', 
		'\a', '+', '\x2', '\x2', 'T', 'U', '\x5', '\x32', '\x1A', '\x2', 'U', 
		'[', '\a', '\x6', '\x2', '\x2', 'V', 'W', '\x5', '\x10', '\t', '\x2', 
		'W', 'X', '\a', '\x3', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'V', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\a', '\x2', '\x2', '_', '`', '\a', '\x3', 
		'\x2', '\x2', '`', '\t', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', 
		'/', '\x2', '\x2', '\x62', '\x63', '\x5', '\x32', '\x1A', '\x2', '\x63', 
		'\x64', '\a', '\b', '\x2', '\x2', '\x64', '\x65', '\x5', '\x32', '\x1A', 
		'\x2', '\x65', '\x66', '\a', '\t', '\x2', '\x2', '\x66', 'o', '\a', '\x6', 
		'\x2', '\x2', 'g', 'j', '\x5', '\x1C', '\xF', '\x2', 'h', 'j', '\x5', 
		'\x1A', '\xE', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\a', '\x3', '\x2', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 
		'm', 'i', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '\a', '\x2', '\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 
		't', '\v', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x30', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x32', '\x1A', '\x2', 'w', 'x', '\a', '\b', '\x2', 
		'\x2', 'x', 'y', '\x5', '\x32', '\x1A', '\x2', 'y', 'z', '\a', '\t', '\x2', 
		'\x2', 'z', '\x83', '\a', '\x6', '\x2', '\x2', '{', '~', '\x5', '\x1C', 
		'\xF', '\x2', '|', '~', '\x5', '\x1A', '\xE', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\x3', '\x2', '\x2', 
		'\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\a', '\x2', '\x2', '\x87', '\x88', 
		'\a', '\x3', '\x2', '\x2', '\x88', '\r', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x30', '\x2', '\x2', '\x8A', '\x8F', '\x5', '\x32', '\x1A', 
		'\x2', '\x8B', '\x8C', '\a', '\n', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\x32', '\x1A', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\b', '\x2', '\x2', '\x93', '\x94', '\x5', '\x32', '\x1A', 
		'\x2', '\x94', '\x95', '\a', '\t', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x3', '\x2', '\x2', '\x96', '\xF', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\a', '%', '\x2', '\x2', '\x98', '\x99', '\x5', '\x30', '\x19', 
		'\x2', '\x99', '\xA5', '\x5', '\x32', '\x1A', '\x2', '\x9A', '\x9B', '\a', 
		'\x4', '\x2', '\x2', '\x9B', '\x9C', '\x5', '(', '\x15', '\x2', '\x9C', 
		'\x9D', '\a', '\x5', '\x2', '\x2', '\x9D', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\n', '\x2', '\x2', '\x9F', '\xA1', '\x5', 
		'\x32', '\x1A', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x3', '\x2', '\x2', '\xA8', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB2', '\a', '\b', '\x2', 
		'\x2', '\xAA', '\xAF', '\x5', '\x14', '\v', '\x2', '\xAB', '\xAC', '\a', 
		'\n', '\x2', '\x2', '\xAC', '\xAE', '\x5', '\x14', '\v', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\t', '\x2', '\x2', '\xB5', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '%', '\x2', 
		'\x2', '\xB7', '\xB8', '\x5', '\x30', '\x19', '\x2', '\xB8', '\xBD', '\x5', 
		'\x32', '\x1A', '\x2', '\xB9', '\xBA', '\a', '\x4', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '(', '\x15', '\x2', '\xBB', '\xBC', '\a', '\x5', '\x2', 
		'\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xCB', '\a', '\x6', '\x2', 
		'\x2', '\xC0', '\xC1', '\x5', '\x18', '\r', '\x2', '\xC1', '\xC2', '\a', 
		'\x3', '\x2', '\x2', '\xC2', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC5', '\x5', '\x1E', '\x10', '\x2', '\xC4', '\xC6', '\a', '\x3', '\x2', 
		'\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\a', '\x2', '\x2', '\xCF', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD7', '\x5', '\x1A', '\xE', 
		'\x2', '\xD1', '\xD7', '\x5', '\x1C', '\xF', '\x2', '\xD2', '\xD7', '\x5', 
		' ', '\x11', '\x2', '\xD3', '\xD7', '\x5', '\x6', '\x4', '\x2', '\xD4', 
		'\xD7', '\x5', '\x10', '\t', '\x2', '\xD5', '\xD7', '\x5', '&', '\x14', 
		'\x2', '\xD6', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x32', '\x1A', '\x2', '\xD9', 
		'\xE2', '\a', '\b', '\x2', '\x2', '\xDA', '\xDF', '\x5', '&', '\x14', 
		'\x2', '\xDB', '\xDC', '\a', '\n', '\x2', '\x2', '\xDC', '\xDE', '\x5', 
		'&', '\x14', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'\t', '\x2', '\x2', '\xE5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\x5', ',', '\x17', '\x2', '\xE7', '\xE8', '\t', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '&', '\x14', '\x2', '\xE9', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '&', '\x2', '\x2', '\xEB', 
		'\xEC', '\x5', '&', '\x14', '\x2', '\xEC', '\xF4', '\x5', '\x16', '\f', 
		'\x2', '\xED', '\xEE', '\a', '(', '\x2', '\x2', '\xEE', '\xEF', '\a', 
		'&', '\x2', '\x2', '\xEF', '\xF0', '\x5', '&', '\x14', '\x2', '\xF0', 
		'\xF1', '\x5', '\x16', '\f', '\x2', '\xF1', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', 
		'(', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\x16', '\f', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'-', '\x2', '\x2', '\xFC', '\xFD', '\x5', '&', '\x14', '\x2', '\xFD', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', '\a', '\v', '\x2', '\x2', 
		'\xFF', '\x102', '\x5', '&', '\x14', '\x2', '\x100', '\x102', '\x5', '$', 
		'\x13', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\a', '\x6', '\x2', '\x2', '\x104', '\x109', '\x5', 
		'&', '\x14', '\x2', '\x105', '\x106', '\a', '\n', '\x2', '\x2', '\x106', 
		'\x108', '\x5', '&', '\x14', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\a', '\x2', '\x2', '\x10D', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\b', '\x14', '\x1', 
		'\x2', '\x10F', '\x110', '\a', '\b', '\x2', '\x2', '\x110', '\x111', '\x5', 
		'&', '\x14', '\x2', '\x111', '\x112', '\a', '\t', '\x2', '\x2', '\x112', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\t', '\x3', '\x2', 
		'\x2', '\x114', '\x118', '\x5', '&', '\x14', '\v', '\x115', '\x118', '\x5', 
		'*', '\x16', '\x2', '\x116', '\x118', '\x5', '\x32', '\x1A', '\x2', '\x117', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x117', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\f', '\n', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x4', 
		'\x2', '\x2', '\x11B', '\x12C', '\x5', '&', '\x14', '\v', '\x11C', '\x11D', 
		'\f', '\t', '\x2', '\x2', '\x11D', '\x11E', '\t', '\x5', '\x2', '\x2', 
		'\x11E', '\x12C', '\x5', '&', '\x14', '\n', '\x11F', '\x120', '\f', '\b', 
		'\x2', '\x2', '\x120', '\x121', '\t', '\x6', '\x2', '\x2', '\x121', '\x12C', 
		'\x5', '&', '\x14', '\t', '\x122', '\x123', '\f', '\a', '\x2', '\x2', 
		'\x123', '\x124', '\t', '\a', '\x2', '\x2', '\x124', '\x12C', '\x5', '&', 
		'\x14', '\b', '\x125', '\x126', '\f', '\x6', '\x2', '\x2', '\x126', '\x127', 
		'\t', '\b', '\x2', '\x2', '\x127', '\x12C', '\x5', '&', '\x14', '\a', 
		'\x128', '\x129', '\f', '\x5', '\x2', '\x2', '\x129', '\x12A', '\t', '\t', 
		'\x2', '\x2', '\x12A', '\x12C', '\x5', '&', '\x14', '\x6', '\x12B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x125', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\a', 
		'\x33', '\x2', '\x2', '\x131', '\x133', '\x5', '\x32', '\x1A', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x133', ')', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x13B', '\a', '\x33', '\x2', '\x2', '\x135', '\x13B', '\a', '\x34', '\x2', 
		'\x2', '\x136', '\x13B', '\a', '\x35', '\x2', '\x2', '\x137', '\x13B', 
		'\a', '\x31', '\x2', '\x2', '\x138', '\x13B', '\x5', '\x1A', '\xE', '\x2', 
		'\x139', '\x13B', '\x5', ',', '\x17', '\x2', '\x13A', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13F', '\x5', '.', '\x18', '\x2', '\x13D', '\x13E', '\a', '#', 
		'\x2', '\x2', '\x13E', '\x140', '\x5', '.', '\x18', '\x2', '\x13F', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '-', '\x3', '\x2', '\x2', '\x2', '\x141', '\x146', '\x5', '\x32', 
		'\x1A', '\x2', '\x142', '\x143', '\a', '\x4', '\x2', '\x2', '\x143', '\x144', 
		'\x5', '(', '\x15', '\x2', '\x144', '\x145', '\a', '\x5', '\x2', '\x2', 
		'\x145', '\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x148', '\x150', '\x5', '\x32', '\x1A', 
		'\x2', '\x149', '\x150', '\a', ',', '\x2', '\x2', '\x14A', '\x150', '\a', 
		'\'', '\x2', '\x2', '\x14B', '\x150', '\a', '.', '\x2', '\x2', '\x14C', 
		'\x150', '\a', '*', '\x2', '\x2', '\x14D', '\x150', '\a', ')', '\x2', 
		'\x2', '\x14E', '\x150', '\a', '\x30', '\x2', '\x2', '\x14F', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x31', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', 
		'\a', '\x32', '\x2', '\x2', '\x152', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\"', ';', '=', 'N', '[', 'i', 'o', '}', '\x83', '\x8F', '\xA2', '\xA5', 
		'\xAF', '\xB2', '\xBD', '\xC5', '\xC7', '\xCB', '\xD6', '\xDF', '\xE2', 
		'\xF4', '\xF9', '\x101', '\x109', '\x117', '\x12B', '\x12D', '\x132', 
		'\x13A', '\x13F', '\x146', '\x14F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
