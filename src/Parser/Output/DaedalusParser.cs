//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Daedalus.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DaedalusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, Const=34, Var=35, If=36, Int=37, Else=38, Func=39, 
		String=40, Class=41, Void=42, Return=43, Float=44, Prototype=45, Instance=46, 
		Null=47, Identifier=48, IntegerLiteral=49, FloatLiteral=50, StringLiteral=51, 
		Whitespace=52, Newline=53, BlockComment=54, LineComment=55;
	public const int
		RULE_daedalusFile = 0, RULE_functionDef = 1, RULE_constDef = 2, RULE_classDef = 3, 
		RULE_prototypeDef = 4, RULE_instanceDef = 5, RULE_instanceDecl = 6, RULE_varDecl = 7, 
		RULE_constArrayDef = 8, RULE_constArrayAssignment = 9, RULE_constValueDef = 10, 
		RULE_constValueAssignment = 11, RULE_varArrayDecl = 12, RULE_varValueDecl = 13, 
		RULE_parameterList = 14, RULE_parameterDecl = 15, RULE_statementBlock = 16, 
		RULE_statement = 17, RULE_funcCall = 18, RULE_assignment = 19, RULE_ifCondition = 20, 
		RULE_elseBlock = 21, RULE_elseIfBlock = 22, RULE_ifBlock = 23, RULE_ifBlockStatement = 24, 
		RULE_returnStatement = 25, RULE_expression = 26, RULE_simpleValue = 27, 
		RULE_value = 28, RULE_complexReference = 29, RULE_complexReferenceNode = 30, 
		RULE_typeReference = 31, RULE_nameNode = 32, RULE_referenceNode = 33, 
		RULE_assigmentOperator = 34;
	public static readonly string[] ruleNames = {
		"daedalusFile", "functionDef", "constDef", "classDef", "prototypeDef", 
		"instanceDef", "instanceDecl", "varDecl", "constArrayDef", "constArrayAssignment", 
		"constValueDef", "constValueAssignment", "varArrayDecl", "varValueDecl", 
		"parameterList", "parameterDecl", "statementBlock", "statement", "funcCall", 
		"assignment", "ifCondition", "elseBlock", "elseIfBlock", "ifBlock", "ifBlockStatement", 
		"returnStatement", "expression", "simpleValue", "value", "complexReference", 
		"complexReferenceNode", "typeReference", "nameNode", "referenceNode", 
		"assigmentOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'{'", "'}'", "'('", "')'", "'['", "']'", "'='", "'-'", 
		"'!'", "'~'", "'+'", "'*'", "'/'", "'%'", "'<<'", "'>>'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'&'", "'|'", "'&&'", "'||'", "'.'", "'+='", 
		"'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Const", "Var", 
		"If", "Int", "Else", "Func", "String", "Class", "Void", "Return", "Float", 
		"Prototype", "Instance", "Null", "Identifier", "IntegerLiteral", "FloatLiteral", 
		"StringLiteral", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Daedalus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DaedalusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DaedalusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DaedalusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DaedalusFileContext : ParserRuleContext {
		public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ConstDefContext[] constDef() {
			return GetRuleContexts<ConstDefContext>();
		}
		public ConstDefContext constDef(int i) {
			return GetRuleContext<ConstDefContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public PrototypeDefContext[] prototypeDef() {
			return GetRuleContexts<PrototypeDefContext>();
		}
		public PrototypeDefContext prototypeDef(int i) {
			return GetRuleContext<PrototypeDefContext>(i);
		}
		public InstanceDefContext[] instanceDef() {
			return GetRuleContexts<InstanceDefContext>();
		}
		public InstanceDefContext instanceDef(int i) {
			return GetRuleContext<InstanceDefContext>(i);
		}
		public InstanceDeclContext[] instanceDecl() {
			return GetRuleContexts<InstanceDeclContext>();
		}
		public InstanceDeclContext instanceDecl(int i) {
			return GetRuleContext<InstanceDeclContext>(i);
		}
		public DaedalusFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daedalusFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterDaedalusFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitDaedalusFile(this);
		}
	}

	[RuleVersion(0)]
	public DaedalusFileContext daedalusFile() {
		DaedalusFileContext _localctx = new DaedalusFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_daedalusFile);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 77;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 70; functionDef();
						}
						break;
					case 2:
						{
						State = 71; constDef();
						}
						break;
					case 3:
						{
						State = 72; varDecl();
						}
						break;
					case 4:
						{
						State = 73; classDef();
						}
						break;
					case 5:
						{
						State = 74; prototypeDef();
						}
						break;
					case 6:
						{
						State = 75; instanceDef();
						}
						break;
					case 7:
						{
						State = 76; instanceDecl();
						}
						break;
					}
					State = 79; Match(T__0);
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(Func);
			State = 87; typeReference();
			State = 88; nameNode();
			State = 89; parameterList();
			State = 90; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(DaedalusParser.Const, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ConstValueDefContext[] constValueDef() {
			return GetRuleContexts<ConstValueDefContext>();
		}
		public ConstValueDefContext constValueDef(int i) {
			return GetRuleContext<ConstValueDefContext>(i);
		}
		public ConstArrayDefContext[] constArrayDef() {
			return GetRuleContexts<ConstArrayDefContext>();
		}
		public ConstArrayDefContext constArrayDef(int i) {
			return GetRuleContext<ConstArrayDefContext>(i);
		}
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(Const);
			State = 93; typeReference();
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 94; constValueDef();
				}
				break;
			case 2:
				{
				State = 95; constArrayDef();
				}
				break;
			}
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 98; Match(T__1);
				State = 101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 99; constValueDef();
					}
					break;
				case 2:
					{
					State = 100; constArrayDef();
					}
					break;
				}
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(DaedalusParser.Class, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(Class);
			State = 109; nameNode();
			State = 110; Match(T__2);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 111; varDecl();
					State = 112; Match(T__0);
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 119; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeDefContext : ParserRuleContext {
		public ITerminalNode Prototype() { return GetToken(DaedalusParser.Prototype, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public PrototypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterPrototypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitPrototypeDef(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeDefContext prototypeDef() {
		PrototypeDefContext _localctx = new PrototypeDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_prototypeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(Prototype);
			State = 122; nameNode();
			State = 123; Match(T__4);
			State = 124; referenceNode();
			State = 125; Match(T__5);
			State = 126; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDefContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public InstanceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDef(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDefContext instanceDef() {
		InstanceDefContext _localctx = new InstanceDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_instanceDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(Instance);
			State = 129; nameNode();
			State = 130; Match(T__4);
			State = 131; referenceNode();
			State = 132; Match(T__5);
			State = 133; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDeclContext : ParserRuleContext {
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public ReferenceNodeContext[] referenceNode() {
			return GetRuleContexts<ReferenceNodeContext>();
		}
		public ReferenceNodeContext referenceNode(int i) {
			return GetRuleContext<ReferenceNodeContext>(i);
		}
		public InstanceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterInstanceDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitInstanceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDeclContext instanceDecl() {
		InstanceDeclContext _localctx = new InstanceDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_instanceDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(Instance);
			State = 136; nameNode();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 137; Match(T__1);
					State = 138; referenceNode();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 144; Match(T__4);
			State = 145; nameNode();
			State = 146; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VarValueDeclContext[] varValueDecl() {
			return GetRuleContexts<VarValueDeclContext>();
		}
		public VarValueDeclContext varValueDecl(int i) {
			return GetRuleContext<VarValueDeclContext>(i);
		}
		public VarArrayDeclContext[] varArrayDecl() {
			return GetRuleContexts<VarArrayDeclContext>();
		}
		public VarArrayDeclContext varArrayDecl(int i) {
			return GetRuleContext<VarArrayDeclContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(Var);
			State = 149; typeReference();
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 150; varValueDecl();
				}
				break;
			case 2:
				{
				State = 151; varArrayDecl();
				}
				break;
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 154; Match(T__1);
				State = 157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 155; varValueDecl();
					}
					break;
				case 2:
					{
					State = 156; varArrayDecl();
					}
					break;
				}
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ConstArrayAssignmentContext constArrayAssignment() {
			return GetRuleContext<ConstArrayAssignmentContext>(0);
		}
		public ConstArrayDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayDefContext constArrayDef() {
		ConstArrayDefContext _localctx = new ConstArrayDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_constArrayDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; nameNode();
			State = 165; Match(T__6);
			State = 166; simpleValue();
			State = 167; Match(T__7);
			State = 168; constArrayAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayAssignmentContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConstArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstArrayAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstArrayAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayAssignmentContext constArrayAssignment() {
		ConstArrayAssignmentContext _localctx = new ConstArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_constArrayAssignment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__8);
			State = 171; Match(T__2);
			{
			State = 172; expression(0);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 173; Match(T__1);
					State = 174; expression(0);
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
			State = 180; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ConstValueAssignmentContext constValueAssignment() {
			return GetRuleContext<ConstValueAssignmentContext>(0);
		}
		public ConstValueDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueDefContext constValueDef() {
		ConstValueDefContext _localctx = new ConstValueDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_constValueDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; nameNode();
			State = 183; constValueAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstValueAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValueAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterConstValueAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitConstValueAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueAssignmentContext constValueAssignment() {
		ConstValueAssignmentContext _localctx = new ConstValueAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_constValueAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__8);
			State = 186; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarArrayDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public VarArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varArrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarArrayDeclContext varArrayDecl() {
		VarArrayDeclContext _localctx = new VarArrayDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_varArrayDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; nameNode();
			State = 189; Match(T__6);
			State = 190; simpleValue();
			State = 191; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarValueDeclContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varValueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterVarValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitVarValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarValueDeclContext varValueDecl() {
		VarValueDeclContext _localctx = new VarValueDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_varValueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; nameNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(T__4);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 196; parameterDecl();
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 197; Match(T__1);
						State = 198; parameterDecl();
						}
						} 
					}
					State = 203;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 206; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(DaedalusParser.Var, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(Var);
			State = 209; typeReference();
			State = 210; nameNode();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 211; Match(T__6);
				State = 212; simpleValue();
				State = 213; Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockStatementContext[] ifBlockStatement() {
			return GetRuleContexts<IfBlockStatementContext>();
		}
		public IfBlockStatementContext ifBlockStatement(int i) {
			return GetRuleContext<IfBlockStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_statementBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(T__2);
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 225;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__4:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case Const:
					case Var:
					case Return:
					case Null:
					case Identifier:
					case IntegerLiteral:
					case FloatLiteral:
					case StringLiteral:
						{
						{
						State = 218; statement();
						State = 219; Match(T__0);
						}
						}
						break;
					case If:
						{
						{
						State = 221; ifBlockStatement();
						State = 223;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 222; Match(T__0);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 232; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; funcCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237; constDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238; varDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; nameNode();
			State = 243; Match(T__4);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 244; expression(0);
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 245; Match(T__1);
						State = 246; expression(0);
						}
						} 
					}
					State = 251;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				}
			}

			State = 254; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public AssigmentOperatorContext assigmentOperator() {
			return GetRuleContext<AssigmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; complexReference();
			State = 257; assigmentOperator();
			State = 258; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(DaedalusParser.Else, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(Else);
			State = 263; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(DaedalusParser.Else, 0); }
		public ITerminalNode If() { return GetToken(DaedalusParser.If, 0); }
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(Else);
			State = 266; Match(If);
			State = 267; ifCondition();
			State = 268; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(DaedalusParser.If, 0); }
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(If);
			State = 271; ifCondition();
			State = 272; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStatementContext : ParserRuleContext {
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterIfBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitIfBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStatementContext ifBlockStatement() {
		IfBlockStatementContext _localctx = new IfBlockStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifBlockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; ifBlock();
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 275; elseIfBlock();
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 281; elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(DaedalusParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(Return);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << Null) | (1L << Identifier) | (1L << IntegerLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 285; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitMoveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitMoveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBitMoveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBitMoveExpression(this);
		}
	}
	public partial class OneArgExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OneArgExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterOneArgExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitOneArgExpression(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
	}
	public partial class ValExpressionContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterValExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitValExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterCompExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitCompExpression(this);
		}
	}
	public partial class BitExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBitExpression(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
	}
	public partial class BracketExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new BracketExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 289; Match(T__4);
				State = 290; expression(0);
				State = 291; Match(T__5);
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				{
				_localctx = new OneArgExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 294; expression(8);
				}
				break;
			case Null:
			case Identifier:
			case IntegerLiteral:
			case FloatLiteral:
			case StringLiteral:
				{
				_localctx = new ValExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 316;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 298;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 299;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 300; expression(8);
						}
						break;
					case 2:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 301;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 302;
						_la = TokenStream.LA(1);
						if ( !(_la==T__9 || _la==T__12) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 303; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new BitMoveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 304;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 305;
						_la = TokenStream.LA(1);
						if ( !(_la==T__16 || _la==T__17) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 306; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 308;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 309; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 311;
						_la = TokenStream.LA(1);
						if ( !(_la==T__22 || _la==T__23) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 312; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new BitExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 313;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 314;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 315; expression(3);
						}
						break;
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_simpleValue);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; Match(IntegerLiteral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; referenceNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParser.IntegerLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(DaedalusParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(DaedalusParser.StringLiteral, 0); }
		public ITerminalNode Null() { return GetToken(DaedalusParser.Null, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_value);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; Match(IntegerLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; Match(FloatLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 328; Match(Null);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 329; funcCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 330; complexReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReference(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceContext complexReference() {
		ComplexReferenceContext _localctx = new ComplexReferenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_complexReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; complexReferenceNode();
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 334; Match(T__28);
				State = 335; complexReferenceNode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceNodeContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ComplexReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterComplexReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitComplexReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceNodeContext complexReferenceNode() {
		ComplexReferenceNodeContext _localctx = new ComplexReferenceNodeContext(Context, State);
		EnterRule(_localctx, 60, RULE_complexReferenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; referenceNode();
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 339; Match(T__6);
				State = 340; simpleValue();
				State = 341; Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public ITerminalNode Void() { return GetToken(DaedalusParser.Void, 0); }
		public ITerminalNode Int() { return GetToken(DaedalusParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(DaedalusParser.Float, 0); }
		public ITerminalNode String() { return GetToken(DaedalusParser.String, 0); }
		public ITerminalNode Func() { return GetToken(DaedalusParser.Func, 0); }
		public ITerminalNode Instance() { return GetToken(DaedalusParser.Instance, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 345; referenceNode();
				}
				break;
			case Void:
				{
				State = 346; Match(Void);
				}
				break;
			case Int:
				{
				State = 347; Match(Int);
				}
				break;
			case Float:
				{
				State = 348; Match(Float);
				}
				break;
			case String:
				{
				State = 349; Match(String);
				}
				break;
			case Func:
				{
				State = 350; Match(Func);
				}
				break;
			case Instance:
				{
				State = 351; Match(Instance);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public NameNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterNameNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitNameNode(this);
		}
	}

	[RuleVersion(0)]
	public NameNodeContext nameNode() {
		NameNodeContext _localctx = new NameNodeContext(Context, State);
		EnterRule(_localctx, 64, RULE_nameNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParser.Identifier, 0); }
		public ReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNodeContext referenceNode() {
		ReferenceNodeContext _localctx = new ReferenceNodeContext(Context, State);
		EnterRule(_localctx, 66, RULE_referenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmentOperatorContext : ParserRuleContext {
		public AssigmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.EnterAssigmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusListener typedListener = listener as IDaedalusListener;
			if (typedListener != null) typedListener.ExitAssigmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssigmentOperatorContext assigmentOperator() {
		AssigmentOperatorContext _localctx = new AssigmentOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_assigmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x16B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', 'P', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'T', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'W', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x63', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'h', '\n', '\x4', '\a', '\x4', 'j', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'm', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'u', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', 'x', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x8E', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x91', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x9B', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xA0', '\n', '\t', '\a', '\t', '\xA2', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xA5', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xB2', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xB5', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xCA', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xCD', '\v', '\x10', '\x5', '\x10', '\xCF', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xDA', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\xE2', '\n', '\x12', '\x5', '\x12', 
		'\xE4', '\n', '\x12', '\a', '\x12', '\xE6', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\xE9', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xF3', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xFA', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xFD', '\v', '\x14', '\x5', '\x14', 
		'\xFF', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x117', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x11A', '\v', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x11D', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x121', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x12B', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\x13F', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x142', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x146', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x14E', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x153', '\n', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x15A', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x163', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\n', 'U', 'v', '\x8F', '\xB3', '\xCB', '\xE7', '\xFB', '\x118', 
		'\x3', '\x36', '%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', '\x2', '\n', '\x3', '\x2', '\f', 
		'\xF', '\x3', '\x2', '\x10', '\x12', '\x4', '\x2', '\f', '\f', '\xF', 
		'\xF', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x15', '\x18', '\x3', 
		'\x2', '\x19', '\x1A', '\x3', '\x2', '\x1B', '\x1E', '\x4', '\x2', '\v', 
		'\v', ' ', '#', '\x2', '\x17D', '\x2', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'X', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'n', '\x3', '\x2', '\x2', '\x2', '\n', '{', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x82', '\x3', '\x2', '\x2', '\x2', '\xE', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xD2', '\x3', '\x2', '\x2', '\x2', '\"', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xF2', '\x3', '\x2', '\x2', '\x2', '&', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x106', '\x3', '\x2', '\x2', '\x2', ',', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x30', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x145', '\x3', '\x2', '\x2', '\x2', ':', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x154', '\x3', '\x2', '\x2', '\x2', '@', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x164', '\x3', '\x2', '\x2', '\x2', '\x44', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'H', 'P', '\x5', '\x4', '\x3', '\x2', 'I', 'P', '\x5', '\x6', '\x4', '\x2', 
		'J', 'P', '\x5', '\x10', '\t', '\x2', 'K', 'P', '\x5', '\b', '\x5', '\x2', 
		'L', 'P', '\x5', '\n', '\x6', '\x2', 'M', 'P', '\x5', '\f', '\a', '\x2', 
		'N', 'P', '\x5', '\xE', '\b', '\x2', 'O', 'H', '\x3', '\x2', '\x2', '\x2', 
		'O', 'I', '\x3', '\x2', '\x2', '\x2', 'O', 'J', '\x3', '\x2', '\x2', '\x2', 
		'O', 'K', '\x3', '\x2', '\x2', '\x2', 'O', 'L', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x3', '\x2', '\x2', 
		'R', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'O', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', ')', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '@', '!', '\x2', 'Z', '[', '\x5', '\x42', '\"', 
		'\x2', '[', '\\', '\x5', '\x1E', '\x10', '\x2', '\\', ']', '\x5', '\"', 
		'\x12', '\x2', ']', '\x5', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'$', '\x2', '\x2', '_', '\x62', '\x5', '@', '!', '\x2', '`', '\x63', '\x5', 
		'\x16', '\f', '\x2', '\x61', '\x63', '\x5', '\x12', '\n', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', 'k', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\a', '\x4', 
		'\x2', '\x2', '\x65', 'h', '\x5', '\x16', '\f', '\x2', '\x66', 'h', '\x5', 
		'\x12', '\n', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', '\a', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '+', '\x2', '\x2', 'o', 'p', '\x5', '\x42', '\"', 
		'\x2', 'p', 'v', '\a', '\x5', '\x2', '\x2', 'q', 'r', '\x5', '\x10', '\t', 
		'\x2', 'r', 's', '\a', '\x3', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'q', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\a', '\x6', '\x2', '\x2', 'z', '\t', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', '/', '\x2', '\x2', '|', '}', '\x5', '\x42', '\"', 
		'\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', '\x7F', '\x5', '\x44', 
		'#', '\x2', '\x7F', '\x80', '\a', '\b', '\x2', '\x2', '\x80', '\x81', 
		'\x5', '\"', '\x12', '\x2', '\x81', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x30', '\x2', '\x2', '\x83', '\x84', '\x5', '\x42', 
		'\"', '\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', '\x86', 
		'\x5', '\x44', '#', '\x2', '\x86', '\x87', '\a', '\b', '\x2', '\x2', '\x87', 
		'\x88', '\x5', '\"', '\x12', '\x2', '\x88', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\x30', '\x2', '\x2', '\x8A', '\x8F', '\x5', 
		'\x42', '\"', '\x2', '\x8B', '\x8C', '\a', '\x4', '\x2', '\x2', '\x8C', 
		'\x8E', '\x5', '\x44', '#', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\a', '\x2', '\x2', '\x93', '\x94', '\x5', 
		'\x42', '\"', '\x2', '\x94', '\x95', '\a', '\b', '\x2', '\x2', '\x95', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '%', '\x2', '\x2', 
		'\x97', '\x9A', '\x5', '@', '!', '\x2', '\x98', '\x9B', '\x5', '\x1C', 
		'\xF', '\x2', '\x99', '\x9B', '\x5', '\x1A', '\xE', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\a', '\x4', 
		'\x2', '\x2', '\x9D', '\xA0', '\x5', '\x1C', '\xF', '\x2', '\x9E', '\xA0', 
		'\x5', '\x1A', '\xE', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\x5', '\x42', '\"', '\x2', '\xA7', '\xA8', '\a', '\t', '\x2', '\x2', 
		'\xA8', '\xA9', '\x5', '\x38', '\x1D', '\x2', '\xA9', '\xAA', '\a', '\n', 
		'\x2', '\x2', '\xAA', '\xAB', '\x5', '\x14', '\v', '\x2', '\xAB', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\v', '\x2', '\x2', 
		'\xAD', '\xAE', '\a', '\x5', '\x2', '\x2', '\xAE', '\xB3', '\x5', '\x36', 
		'\x1C', '\x2', '\xAF', '\xB0', '\a', '\x4', '\x2', '\x2', '\xB0', '\xB2', 
		'\x5', '\x36', '\x1C', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\a', '\x6', '\x2', '\x2', '\xB7', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB9', '\x5', '\x42', '\"', '\x2', '\xB9', '\xBA', 
		'\x5', '\x18', '\r', '\x2', '\xBA', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBC', '\a', '\v', '\x2', '\x2', '\xBC', '\xBD', '\x5', '\x36', 
		'\x1C', '\x2', '\xBD', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x5', '\x42', '\"', '\x2', '\xBF', '\xC0', '\a', '\t', '\x2', '\x2', 
		'\xC0', '\xC1', '\x5', '\x38', '\x1D', '\x2', '\xC1', '\xC2', '\a', '\n', 
		'\x2', '\x2', '\xC2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\x5', '\x42', '\"', '\x2', '\xC4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xCE', '\a', '\a', '\x2', '\x2', '\xC6', '\xCB', '\x5', ' ', 
		'\x11', '\x2', '\xC7', '\xC8', '\a', '\x4', '\x2', '\x2', '\xC8', '\xCA', 
		'\x5', ' ', '\x11', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\a', '\b', '\x2', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\a', '%', '\x2', '\x2', '\xD3', '\xD4', '\x5', '@', '!', 
		'\x2', '\xD4', '\xD9', '\x5', '\x42', '\"', '\x2', '\xD5', '\xD6', '\a', 
		'\t', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x38', '\x1D', '\x2', '\xD7', 
		'\xD8', '\a', '\n', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '!', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xE7', '\a', '\x5', '\x2', '\x2', '\xDC', '\xDD', '\x5', '$', '\x13', 
		'\x2', '\xDD', '\xDE', '\a', '\x3', '\x2', '\x2', '\xDE', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\x32', '\x1A', '\x2', '\xE0', 
		'\xE2', '\a', '\x3', '\x2', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'\x6', '\x2', '\x2', '\xEB', '#', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xF3', '\x5', '&', '\x14', '\x2', '\xED', '\xF3', '\x5', '(', '\x15', 
		'\x2', '\xEE', '\xF3', '\x5', '\x34', '\x1B', '\x2', '\xEF', '\xF3', '\x5', 
		'\x6', '\x4', '\x2', '\xF0', '\xF3', '\x5', '\x10', '\t', '\x2', '\xF1', 
		'\xF3', '\x5', '\x36', '\x1C', '\x2', '\xF2', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '%', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x5', 
		'\x42', '\"', '\x2', '\xF5', '\xFE', '\a', '\a', '\x2', '\x2', '\xF6', 
		'\xFB', '\x5', '\x36', '\x1C', '\x2', '\xF7', '\xF8', '\a', '\x4', '\x2', 
		'\x2', '\xF8', '\xFA', '\x5', '\x36', '\x1C', '\x2', '\xF9', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\a', '\b', '\x2', '\x2', '\x101', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\x5', '<', '\x1F', '\x2', '\x103', 
		'\x104', '\x5', '\x46', '$', '\x2', '\x104', '\x105', '\x5', '\x36', '\x1C', 
		'\x2', '\x105', ')', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'\x36', '\x1C', '\x2', '\x107', '+', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\a', '(', '\x2', '\x2', '\x109', '\x10A', '\x5', '\"', '\x12', 
		'\x2', '\x10A', '-', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', 
		'(', '\x2', '\x2', '\x10C', '\x10D', '\a', '&', '\x2', '\x2', '\x10D', 
		'\x10E', '\x5', '*', '\x16', '\x2', '\x10E', '\x10F', '\x5', '\"', '\x12', 
		'\x2', '\x10F', '/', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', 
		'&', '\x2', '\x2', '\x111', '\x112', '\x5', '*', '\x16', '\x2', '\x112', 
		'\x113', '\x5', '\"', '\x12', '\x2', '\x113', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x118', '\x5', '\x30', '\x19', '\x2', '\x115', '\x117', 
		'\x5', '.', '\x18', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11D', '\x5', ',', '\x17', '\x2', '\x11C', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x120', '\a', '-', 
		'\x2', '\x2', '\x11F', '\x121', '\x5', '\x36', '\x1C', '\x2', '\x120', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x35', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\b', '\x1C', '\x1', '\x2', '\x123', '\x124', '\a', '\a', '\x2', '\x2', 
		'\x124', '\x125', '\x5', '\x36', '\x1C', '\x2', '\x125', '\x126', '\a', 
		'\b', '\x2', '\x2', '\x126', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\t', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x5', '\x36', '\x1C', 
		'\n', '\x129', '\x12B', '\x5', ':', '\x1E', '\x2', '\x12A', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12D', '\f', '\t', '\x2', '\x2', '\x12D', '\x12E', '\t', 
		'\x3', '\x2', '\x2', '\x12E', '\x13F', '\x5', '\x36', '\x1C', '\n', '\x12F', 
		'\x130', '\f', '\b', '\x2', '\x2', '\x130', '\x131', '\t', '\x4', '\x2', 
		'\x2', '\x131', '\x13F', '\x5', '\x36', '\x1C', '\t', '\x132', '\x133', 
		'\f', '\a', '\x2', '\x2', '\x133', '\x134', '\t', '\x5', '\x2', '\x2', 
		'\x134', '\x13F', '\x5', '\x36', '\x1C', '\b', '\x135', '\x136', '\f', 
		'\x6', '\x2', '\x2', '\x136', '\x137', '\t', '\x6', '\x2', '\x2', '\x137', 
		'\x13F', '\x5', '\x36', '\x1C', '\a', '\x138', '\x139', '\f', '\x5', '\x2', 
		'\x2', '\x139', '\x13A', '\t', '\a', '\x2', '\x2', '\x13A', '\x13F', '\x5', 
		'\x36', '\x1C', '\x6', '\x13B', '\x13C', '\f', '\x4', '\x2', '\x2', '\x13C', 
		'\x13D', '\t', '\b', '\x2', '\x2', '\x13D', '\x13F', '\x5', '\x36', '\x1C', 
		'\x5', '\x13E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x146', '\a', '\x33', '\x2', '\x2', '\x144', '\x146', '\x5', 
		'\x44', '#', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x14E', '\a', '\x33', '\x2', '\x2', '\x148', '\x14E', 
		'\a', '\x34', '\x2', '\x2', '\x149', '\x14E', '\a', '\x35', '\x2', '\x2', 
		'\x14A', '\x14E', '\a', '\x31', '\x2', '\x2', '\x14B', '\x14E', '\x5', 
		'&', '\x14', '\x2', '\x14C', '\x14E', '\x5', '<', '\x1F', '\x2', '\x14D', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x14F', '\x152', '\x5', '>', ' ', '\x2', '\x150', '\x151', 
		'\a', '\x1F', '\x2', '\x2', '\x151', '\x153', '\x5', '>', ' ', '\x2', 
		'\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '=', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x159', '\x5', '\x44', '#', '\x2', '\x155', '\x156', '\a', '\t', '\x2', 
		'\x2', '\x156', '\x157', '\x5', '\x38', '\x1D', '\x2', '\x157', '\x158', 
		'\a', '\n', '\x2', '\x2', '\x158', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x155', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '?', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x163', '\x5', '\x44', '#', '\x2', '\x15C', '\x163', '\a', ',', '\x2', 
		'\x2', '\x15D', '\x163', '\a', '\'', '\x2', '\x2', '\x15E', '\x163', '\a', 
		'.', '\x2', '\x2', '\x15F', '\x163', '\a', '*', '\x2', '\x2', '\x160', 
		'\x163', '\a', ')', '\x2', '\x2', '\x161', '\x163', '\a', '\x30', '\x2', 
		'\x2', '\x162', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x162', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x162', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\a', '\x32', '\x2', '\x2', '\x165', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x32', '\x2', '\x2', 
		'\x167', '\x45', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\t', '\t', 
		'\x2', '\x2', '\x169', 'G', '\x3', '\x2', '\x2', '\x2', '!', 'O', 'U', 
		'\x62', 'g', 'k', 'v', '\x8F', '\x9A', '\x9F', '\xA3', '\xB3', '\xCB', 
		'\xCE', '\xD9', '\xE1', '\xE3', '\xE7', '\xF2', '\xFB', '\xFE', '\x118', 
		'\x11C', '\x120', '\x12A', '\x13E', '\x140', '\x145', '\x14D', '\x152', 
		'\x159', '\x162',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
