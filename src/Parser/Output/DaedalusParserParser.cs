//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DaedalusParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DaedalusParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class DaedalusParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, Identifier=48, Nondigit=49, Digit=50, StringLiteral=51, 
		IntegerLiteral=52, FloatLiteral=53, Non_zero_digit=54, Letter=55, WS=56, 
		COMMENT=57, LINE_COMMENT=58;
	public const int
		RULE_file = 0, RULE_functionDef = 1, RULE_parameterList = 2, RULE_statementBlock = 3, 
		RULE_statement = 4, RULE_funcCall = 5, RULE_assignment = 6, RULE_ifBlock = 7, 
		RULE_returnStatement = 8, RULE_varDecl = 9, RULE_constDef = 10, RULE_classDef = 11, 
		RULE_prototypeDef = 12, RULE_instanceDef = 13, RULE_instanceDecl = 14, 
		RULE_constAssignment = 15, RULE_arrayLiteral = 16, RULE_expression = 17, 
		RULE_logicAnd = 18, RULE_bitOr = 19, RULE_bitAnd = 20, RULE_equal = 21, 
		RULE_comparison = 22, RULE_bitShift = 23, RULE_add = 24, RULE_mult = 25, 
		RULE_unary = 26, RULE_simpleValue = 27, RULE_value = 28, RULE_complexReference = 29, 
		RULE_complexReferenceNode = 30, RULE_typeReference = 31, RULE_referenceNode = 32, 
		RULE_nameNode = 33;
	public static readonly string[] ruleNames = {
		"file", "functionDef", "parameterList", "statementBlock", "statement", 
		"funcCall", "assignment", "ifBlock", "returnStatement", "varDecl", "constDef", 
		"classDef", "prototypeDef", "instanceDef", "instanceDecl", "constAssignment", 
		"arrayLiteral", "expression", "logicAnd", "bitOr", "bitAnd", "equal", 
		"comparison", "bitShift", "add", "mult", "unary", "simpleValue", "value", 
		"complexReference", "complexReferenceNode", "typeReference", "referenceNode", 
		"nameNode"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'func'", "'('", "','", "')'", "'{'", "'}'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'if'", "'else'", "'return'", "'var'", "'['", 
		"']'", "'const'", "'class'", "'prototype'", "'instance'", "'||'", "'&&'", 
		"'|'", "'&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'null'", "'.'", "'void'", 
		"'int'", "'float'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Identifier", "Nondigit", "Digit", "StringLiteral", "IntegerLiteral", 
		"FloatLiteral", "Non_zero_digit", "Letter", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DaedalusParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DaedalusParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DaedalusParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DaedalusParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		public ConstDefContext[] constDef() {
			return GetRuleContexts<ConstDefContext>();
		}
		public ConstDefContext constDef(int i) {
			return GetRuleContext<ConstDefContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public PrototypeDefContext[] prototypeDef() {
			return GetRuleContexts<PrototypeDefContext>();
		}
		public PrototypeDefContext prototypeDef(int i) {
			return GetRuleContext<PrototypeDefContext>(i);
		}
		public InstanceDefContext[] instanceDef() {
			return GetRuleContexts<InstanceDefContext>();
		}
		public InstanceDefContext instanceDef(int i) {
			return GetRuleContext<InstanceDefContext>(i);
		}
		public InstanceDeclContext[] instanceDecl() {
			return GetRuleContexts<InstanceDeclContext>();
		}
		public InstanceDeclContext instanceDecl(int i) {
			return GetRuleContext<InstanceDeclContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 76;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 68; functionDef();
						}
						break;
					case 2:
						{
						State = 69; constDef();
						}
						break;
					case 3:
						{
						State = 70; varDecl();
						}
						break;
					case 4:
						{
						State = 71; ifBlock();
						}
						break;
					case 5:
						{
						State = 72; classDef();
						}
						break;
					case 6:
						{
						State = 73; prototypeDef();
						}
						break;
					case 7:
						{
						State = 74; instanceDef();
						}
						break;
					case 8:
						{
						State = 75; instanceDecl();
						}
						break;
					}
					State = 78; Match(T__0);
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__1);
			State = 86; typeReference();
			State = 87; nameNode();
			State = 88; parameterList();
			State = 89; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__2);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 92; varDecl();
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 93; Match(T__3);
						State = 94; varDecl();
						}
						} 
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 102; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__5);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 112;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__2:
					case T__14:
					case T__15:
					case T__18:
					case T__34:
					case T__35:
					case T__39:
					case T__40:
					case T__41:
					case Identifier:
					case StringLiteral:
					case IntegerLiteral:
					case FloatLiteral:
						{
						{
						State = 105; statement();
						State = 106; Match(T__0);
						}
						}
						break;
					case T__12:
						{
						{
						State = 108; ifBlock();
						State = 110;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 109; Match(T__0);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 119; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ConstDefContext constDef() {
			return GetRuleContext<ConstDefContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; funcCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; constDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 125; varDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 126; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; referenceNode();
			State = 130; Match(T__2);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__34) | (1L << T__35) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << Identifier) | (1L << StringLiteral) | (1L << IntegerLiteral) | (1L << FloatLiteral))) != 0)) {
				{
				State = 131; expression();
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 132; Match(T__3);
						State = 133; expression();
						}
						} 
					}
					State = 138;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
			}

			State = 141; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; complexReference();
			State = 144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 145; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(T__12);
			State = 148; expression();
			State = 149; statementBlock();
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 150; Match(T__13);
					State = 151; Match(T__12);
					State = 152; expression();
					State = 153; statementBlock();
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 160; Match(T__13);
				State = 161; statementBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(T__14);
			{
			State = 165; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_varDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__15);
			State = 168; typeReference();
			State = 169; nameNode();
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				{
				State = 170; Match(T__16);
				State = 171; simpleValue();
				State = 172; Match(T__17);
				}
				}
				break;
			case 2:
				{
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 174; Match(T__3);
						State = 175; nameNode();
						}
						} 
					}
					State = 180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDefContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ConstAssignmentContext constAssignment() {
			return GetRuleContext<ConstAssignmentContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ConstDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterConstDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitConstDef(this);
		}
	}

	[RuleVersion(0)]
	public ConstDefContext constDef() {
		ConstDefContext _localctx = new ConstDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_constDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(T__18);
			State = 184; typeReference();
			State = 185; nameNode();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 186; Match(T__16);
				State = 187; simpleValue();
				State = 188; Match(T__17);
				}
			}

			State = 192; constAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_classDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(T__19);
			State = 195; nameNode();
			State = 196; Match(T__5);
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 197; varDecl();
					State = 198; Match(T__0);
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 205; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public PrototypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterPrototypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitPrototypeDef(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeDefContext prototypeDef() {
		PrototypeDefContext _localctx = new PrototypeDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_prototypeDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(T__20);
			State = 208; nameNode();
			State = 209; Match(T__2);
			State = 210; referenceNode();
			State = 211; Match(T__4);
			State = 212; Match(T__5);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						State = 213; assignment();
						}
						break;
					case 2:
						{
						State = 214; funcCall();
						}
						break;
					}
					State = 217; Match(T__0);
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 224; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDefContext : ParserRuleContext {
		public NameNodeContext nameNode() {
			return GetRuleContext<NameNodeContext>(0);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		public InstanceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterInstanceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitInstanceDef(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDefContext instanceDef() {
		InstanceDefContext _localctx = new InstanceDefContext(Context, State);
		EnterRule(_localctx, 26, RULE_instanceDef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__21);
			State = 227; nameNode();
			State = 228; Match(T__2);
			State = 229; referenceNode();
			State = 230; Match(T__4);
			State = 231; Match(T__5);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 234;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						State = 232; assignment();
						}
						break;
					case 2:
						{
						State = 233; funcCall();
						}
						break;
					}
					State = 236; Match(T__0);
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 243; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceDeclContext : ParserRuleContext {
		public NameNodeContext[] nameNode() {
			return GetRuleContexts<NameNodeContext>();
		}
		public NameNodeContext nameNode(int i) {
			return GetRuleContext<NameNodeContext>(i);
		}
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public InstanceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterInstanceDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitInstanceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InstanceDeclContext instanceDecl() {
		InstanceDeclContext _localctx = new InstanceDeclContext(Context, State);
		EnterRule(_localctx, 28, RULE_instanceDecl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(T__21);
			State = 246; nameNode();
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 247; Match(T__3);
					State = 248; nameNode();
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 254; Match(T__2);
			State = 255; referenceNode();
			State = 256; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ConstAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterConstAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitConstAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ConstAssignmentContext constAssignment() {
		ConstAssignmentContext _localctx = new ConstAssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_constAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(T__7);
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__34:
			case T__35:
			case T__39:
			case T__40:
			case T__41:
			case Identifier:
			case StringLiteral:
			case IntegerLiteral:
			case FloatLiteral:
				{
				State = 259; expression();
				}
				break;
			case T__5:
				{
				State = 260; arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__5);
			{
			State = 264; expression();
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 265; Match(T__3);
					State = 266; expression();
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
			State = 272; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LogicAndContext logicAnd() {
			return GetRuleContext<LogicAndContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; logicAnd();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 275; Match(T__22);
				State = 276; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		public BitOrContext bitOr() {
			return GetRuleContext<BitOrContext>(0);
		}
		public LogicAndContext logicAnd() {
			return GetRuleContext<LogicAndContext>(0);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(Context, State);
		EnterRule(_localctx, 36, RULE_logicAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; bitOr();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 280; Match(T__23);
				State = 281; logicAnd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOrContext : ParserRuleContext {
		public BitAndContext bitAnd() {
			return GetRuleContext<BitAndContext>(0);
		}
		public BitOrContext bitOr() {
			return GetRuleContext<BitOrContext>(0);
		}
		public BitOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterBitOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitBitOr(this);
		}
	}

	[RuleVersion(0)]
	public BitOrContext bitOr() {
		BitOrContext _localctx = new BitOrContext(Context, State);
		EnterRule(_localctx, 38, RULE_bitOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; bitAnd();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 285; Match(T__24);
				State = 286; bitOr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAndContext : ParserRuleContext {
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public BitAndContext bitAnd() {
			return GetRuleContext<BitAndContext>(0);
		}
		public BitAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterBitAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitBitAnd(this);
		}
	}

	[RuleVersion(0)]
	public BitAndContext bitAnd() {
		BitAndContext _localctx = new BitAndContext(Context, State);
		EnterRule(_localctx, 40, RULE_bitAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; equal();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 290; Match(T__25);
				State = 291; bitAnd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 42, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; comparison();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26 || _la==T__27) {
				{
				State = 295;
				_la = TokenStream.LA(1);
				if ( !(_la==T__26 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 296; equal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public BitShiftContext bitShift() {
			return GetRuleContext<BitShiftContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 44, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; bitShift();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) {
				{
				State = 300;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 301; comparison();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitShiftContext : ParserRuleContext {
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public BitShiftContext bitShift() {
			return GetRuleContext<BitShiftContext>(0);
		}
		public BitShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterBitShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitBitShift(this);
		}
	}

	[RuleVersion(0)]
	public BitShiftContext bitShift() {
		BitShiftContext _localctx = new BitShiftContext(Context, State);
		EnterRule(_localctx, 46, RULE_bitShift);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; add();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 305;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 306; bitShift();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 48, RULE_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; mult();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 310;
				_la = TokenStream.LA(1);
				if ( !(_la==T__34 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 311; add();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 50, RULE_mult);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; unary();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) {
				{
				State = 315;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 316; mult();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 52, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__39) | (1L << T__40))) != 0)) {
				{
				State = 319;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__39) | (1L << T__40))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 322; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParserParser.IntegerLiteral, 0); }
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_simpleValue);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(IntegerLiteral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; referenceNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DaedalusParserParser.IntegerLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(DaedalusParserParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(DaedalusParserParser.StringLiteral, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ComplexReferenceContext complexReference() {
			return GetRuleContext<ComplexReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_value);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; Match(IntegerLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; Match(FloatLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 331; Match(T__41);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 332; funcCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 333; complexReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 334; Match(T__2);
				State = 335; expression();
				State = 336; Match(T__4);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceContext : ParserRuleContext {
		public ComplexReferenceNodeContext[] complexReferenceNode() {
			return GetRuleContexts<ComplexReferenceNodeContext>();
		}
		public ComplexReferenceNodeContext complexReferenceNode(int i) {
			return GetRuleContext<ComplexReferenceNodeContext>(i);
		}
		public ComplexReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterComplexReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitComplexReference(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceContext complexReference() {
		ComplexReferenceContext _localctx = new ComplexReferenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_complexReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; complexReferenceNode();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__42) {
				{
				State = 341; Match(T__42);
				State = 342; complexReferenceNode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexReferenceNodeContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ComplexReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexReferenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterComplexReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitComplexReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ComplexReferenceNodeContext complexReferenceNode() {
		ComplexReferenceNodeContext _localctx = new ComplexReferenceNodeContext(Context, State);
		EnterRule(_localctx, 60, RULE_complexReferenceNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; referenceNode();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 346; Match(T__16);
				State = 347; simpleValue();
				State = 348; Match(T__17);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ReferenceNodeContext referenceNode() {
			return GetRuleContext<ReferenceNodeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 352; referenceNode();
				}
				break;
			case T__43:
				{
				State = 353; Match(T__43);
				}
				break;
			case T__44:
				{
				State = 354; Match(T__44);
				}
				break;
			case T__45:
				{
				State = 355; Match(T__45);
				}
				break;
			case T__46:
				{
				State = 356; Match(T__46);
				}
				break;
			case T__1:
				{
				State = 357; Match(T__1);
				}
				break;
			case T__21:
				{
				State = 358; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParserParser.Identifier, 0); }
		public ReferenceNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterReferenceNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitReferenceNode(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNodeContext referenceNode() {
		ReferenceNodeContext _localctx = new ReferenceNodeContext(Context, State);
		EnterRule(_localctx, 64, RULE_referenceNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameNodeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DaedalusParserParser.Identifier, 0); }
		public NameNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.EnterNameNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDaedalusParserListener typedListener = listener as IDaedalusParserListener;
			if (typedListener != null) typedListener.ExitNameNode(this);
		}
	}

	[RuleVersion(0)]
	public NameNodeContext nameNode() {
		NameNodeContext _localctx = new NameNodeContext(Context, State);
		EnterRule(_localctx, 66, RULE_nameNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x170', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'O', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'S', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'V', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x62', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x65', '\v', '\x4', '\x5', '\x4', 
		'g', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'q', '\n', '\x5', '\x5', '\x5', 's', '\n', '\x5', '\a', '\x5', 'u', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'x', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x82', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x89', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x8C', '\v', '\a', '\x5', '\a', '\x8E', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x9E', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\xA1', '\v', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xA5', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xB3', '\n', '\v', '\f', '\v', '\xE', '\v', '\xB6', '\v', '\v', '\x5', 
		'\v', '\xB8', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xC1', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xCB', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xCE', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xDA', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xDE', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xE1', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xED', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xF1', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xF4', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\xFC', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xFF', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x108', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x10E', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x111', '\v', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x118', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x11D', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x122', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x127', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x12C', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x131', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x136', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x13B', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x140', 
		'\n', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x143', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x149', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x155', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x15A', '\n', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x161', '\n', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x16A', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\f', 'T', '\x63', 'v', '\x8A', '\x9F', 
		'\xCC', '\xDF', '\xF2', '\xFD', '\x10F', '\x2', '$', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x2', '\t', 
		'\x3', '\x2', '\n', '\xE', '\x3', '\x2', '\x1D', '\x1E', '\x3', '\x2', 
		'\x1F', '\"', '\x3', '\x2', '#', '$', '\x3', '\x2', '%', '&', '\x3', '\x2', 
		'\'', ')', '\x4', '\x2', '%', '&', '*', '+', '\x2', '\x188', '\x2', 'T', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', '\x6', 
		']', '\x3', '\x2', '\x2', '\x2', '\b', 'j', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x81', '\x3', '\x2', '\x2', '\x2', '\f', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x91', '\x3', '\x2', '\x2', '\x2', '\x10', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xF7', '\x3', '\x2', '\x2', '\x2', ' ', '\x104', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x109', '\x3', '\x2', '\x2', '\x2', '$', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x11E', '\x3', '\x2', '\x2', '\x2', '*', '\x123', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x128', '\x3', '\x2', '\x2', '\x2', '.', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x137', '\x3', '\x2', '\x2', '\x2', '\x34', '\x13C', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x142', '\x3', '\x2', '\x2', '\x2', '\x38', '\x148', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x156', '\x3', '\x2', '\x2', '\x2', '>', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x169', '\x3', '\x2', '\x2', '\x2', '\x42', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'O', '\x5', '\x4', '\x3', '\x2', 'G', 'O', '\x5', '\x16', '\f', 
		'\x2', 'H', 'O', '\x5', '\x14', '\v', '\x2', 'I', 'O', '\x5', '\x10', 
		'\t', '\x2', 'J', 'O', '\x5', '\x18', '\r', '\x2', 'K', 'O', '\x5', '\x1A', 
		'\xE', '\x2', 'L', 'O', '\x5', '\x1C', '\xF', '\x2', 'M', 'O', '\x5', 
		'\x1E', '\x10', '\x2', 'N', '\x46', '\x3', '\x2', '\x2', '\x2', 'N', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'H', '\x3', '\x2', '\x2', '\x2', 'N', 
		'I', '\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 
		'N', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\x3', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'N', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'U', '\x3', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '\x4', '\x2', '\x2', 'X', 'Y', '\x5', '@', '!', 
		'\x2', 'Y', 'Z', '\x5', '\x44', '#', '\x2', 'Z', '[', '\x5', '\x6', '\x4', 
		'\x2', '[', '\\', '\x5', '\b', '\x5', '\x2', '\\', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ']', '\x66', '\a', '\x5', '\x2', '\x2', '^', '\x63', '\x5', 
		'\x14', '\v', '\x2', '_', '`', '\a', '\x6', '\x2', '\x2', '`', '\x62', 
		'\x5', '\x14', '\v', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\a', '\x2', '\x2', 
		'i', '\a', '\x3', '\x2', '\x2', '\x2', 'j', 'v', '\a', '\b', '\x2', '\x2', 
		'k', 'l', '\x5', '\n', '\x6', '\x2', 'l', 'm', '\a', '\x3', '\x2', '\x2', 
		'm', 's', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x5', '\x10', '\t', '\x2', 
		'o', 'q', '\a', '\x3', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 
		'r', 'k', '\x3', '\x2', '\x2', '\x2', 'r', 'n', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\t', '\x2', '\x2', 
		'z', '\t', '\x3', '\x2', '\x2', '\x2', '{', '\x82', '\x5', '\f', '\a', 
		'\x2', '|', '\x82', '\x5', '\xE', '\b', '\x2', '}', '\x82', '\x5', '\x12', 
		'\n', '\x2', '~', '\x82', '\x5', '\x16', '\f', '\x2', '\x7F', '\x82', 
		'\x5', '\x14', '\v', '\x2', '\x80', '\x82', '\x5', '$', '\x13', '\x2', 
		'\x81', '{', '\x3', '\x2', '\x2', '\x2', '\x81', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '}', '\x3', '\x2', '\x2', '\x2', '\x81', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x5', '\x42', '\"', '\x2', '\x84', '\x8D', '\a', '\x5', 
		'\x2', '\x2', '\x85', '\x8A', '\x5', '$', '\x13', '\x2', '\x86', '\x87', 
		'\a', '\x6', '\x2', '\x2', '\x87', '\x89', '\x5', '$', '\x13', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\a', '\x2', '\x2', 
		'\x90', '\r', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x5', '<', 
		'\x1F', '\x2', '\x92', '\x93', '\t', '\x2', '\x2', '\x2', '\x93', '\x94', 
		'\x5', '$', '\x13', '\x2', '\x94', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\xF', '\x2', '\x2', '\x96', '\x97', '\x5', '$', 
		'\x13', '\x2', '\x97', '\x9F', '\x5', '\b', '\x5', '\x2', '\x98', '\x99', 
		'\a', '\x10', '\x2', '\x2', '\x99', '\x9A', '\a', '\xF', '\x2', '\x2', 
		'\x9A', '\x9B', '\x5', '$', '\x13', '\x2', '\x9B', '\x9C', '\x5', '\b', 
		'\x5', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x10', '\x2', '\x2', 
		'\xA3', '\xA5', '\x5', '\b', '\x5', '\x2', '\xA4', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x11', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '$', '\x13', '\x2', '\xA8', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\a', '\x12', '\x2', '\x2', '\xAA', '\xAB', 
		'\x5', '@', '!', '\x2', '\xAB', '\xB7', '\x5', '\x44', '#', '\x2', '\xAC', 
		'\xAD', '\a', '\x13', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x38', '\x1D', 
		'\x2', '\xAE', '\xAF', '\a', '\x14', '\x2', '\x2', '\xAF', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x6', '\x2', '\x2', '\xB1', 
		'\xB3', '\x5', '\x44', '#', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x15', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '@', '!', '\x2', '\xBB', '\xC0', '\x5', 
		'\x44', '#', '\x2', '\xBC', '\xBD', '\a', '\x13', '\x2', '\x2', '\xBD', 
		'\xBE', '\x5', '\x38', '\x1D', '\x2', '\xBE', '\xBF', '\a', '\x14', '\x2', 
		'\x2', '\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x5', ' ', '\x11', 
		'\x2', '\xC3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\x16', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x44', '#', '\x2', '\xC6', 
		'\xCC', '\a', '\b', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x14', '\v', 
		'\x2', '\xC8', '\xC9', '\a', '\x3', '\x2', '\x2', '\xC9', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\t', '\x2', '\x2', '\xD0', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\x17', '\x2', '\x2', '\xD2', '\xD3', '\x5', 
		'\x44', '#', '\x2', '\xD3', '\xD4', '\a', '\x5', '\x2', '\x2', '\xD4', 
		'\xD5', '\x5', '\x42', '\"', '\x2', '\xD5', '\xD6', '\a', '\a', '\x2', 
		'\x2', '\xD6', '\xDF', '\a', '\b', '\x2', '\x2', '\xD7', '\xDA', '\x5', 
		'\xE', '\b', '\x2', '\xD8', '\xDA', '\x5', '\f', '\a', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', 
		'\x3', '\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\t', '\x2', 
		'\x2', '\xE3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'\x18', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x44', '#', '\x2', '\xE6', 
		'\xE7', '\a', '\x5', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x42', '\"', 
		'\x2', '\xE8', '\xE9', '\a', '\a', '\x2', '\x2', '\xE9', '\xF2', '\a', 
		'\b', '\x2', '\x2', '\xEA', '\xED', '\x5', '\xE', '\b', '\x2', '\xEB', 
		'\xED', '\x5', '\f', '\a', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x3', '\x2', '\x2', '\xEF', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\t', '\x2', '\x2', '\xF6', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '\x18', '\x2', '\x2', '\xF8', 
		'\xFD', '\x5', '\x44', '#', '\x2', '\xF9', '\xFA', '\a', '\x6', '\x2', 
		'\x2', '\xFA', '\xFC', '\x5', '\x44', '#', '\x2', '\xFB', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x5', '\x2', '\x2', '\x101', 
		'\x102', '\x5', '\x42', '\"', '\x2', '\x102', '\x103', '\a', '\a', '\x2', 
		'\x2', '\x103', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x104', '\x107', 
		'\a', '\n', '\x2', '\x2', '\x105', '\x108', '\x5', '$', '\x13', '\x2', 
		'\x106', '\x108', '\x5', '\"', '\x12', '\x2', '\x107', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\b', '\x2', 
		'\x2', '\x10A', '\x10F', '\x5', '$', '\x13', '\x2', '\x10B', '\x10C', 
		'\a', '\x6', '\x2', '\x2', '\x10C', '\x10E', '\x5', '$', '\x13', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\t', '\x2', '\x2', '\x113', '#', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x117', '\x5', '&', '\x14', '\x2', '\x115', '\x116', '\a', '\x19', '\x2', 
		'\x2', '\x116', '\x118', '\x5', '$', '\x13', '\x2', '\x117', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '%', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x5', '(', 
		'\x15', '\x2', '\x11A', '\x11B', '\a', '\x1A', '\x2', '\x2', '\x11B', 
		'\x11D', '\x5', '&', '\x14', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x121', '\x5', '*', '\x16', '\x2', '\x11F', 
		'\x120', '\a', '\x1B', '\x2', '\x2', '\x120', '\x122', '\x5', '(', '\x15', 
		'\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x122', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x126', '\x5', ',', '\x17', '\x2', '\x124', '\x125', '\a', '\x1C', 
		'\x2', '\x2', '\x125', '\x127', '\x5', '*', '\x16', '\x2', '\x126', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '+', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x5', '.', 
		'\x18', '\x2', '\x129', '\x12A', '\t', '\x3', '\x2', '\x2', '\x12A', '\x12C', 
		'\x5', ',', '\x17', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x12D', '\x130', '\x5', '\x30', '\x19', '\x2', '\x12E', 
		'\x12F', '\t', '\x4', '\x2', '\x2', '\x12F', '\x131', '\x5', '.', '\x18', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x135', '\x5', '\x32', '\x1A', '\x2', '\x133', '\x134', '\t', 
		'\x5', '\x2', '\x2', '\x134', '\x136', '\x5', '\x30', '\x19', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x31', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', 
		'\x5', '\x34', '\x1B', '\x2', '\x138', '\x139', '\t', '\x6', '\x2', '\x2', 
		'\x139', '\x13B', '\x5', '\x32', '\x1A', '\x2', '\x13A', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', '\x5', '\x36', '\x1C', 
		'\x2', '\x13D', '\x13E', '\t', '\a', '\x2', '\x2', '\x13E', '\x140', '\x5', 
		'\x34', '\x1B', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x143', '\t', '\b', '\x2', '\x2', '\x142', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x5', ':', '\x1E', 
		'\x2', '\x145', '\x37', '\x3', '\x2', '\x2', '\x2', '\x146', '\x149', 
		'\a', '\x36', '\x2', '\x2', '\x147', '\x149', '\x5', '\x42', '\"', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x39', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x155', '\a', '\x36', '\x2', '\x2', '\x14B', '\x155', '\a', '\x37', '\x2', 
		'\x2', '\x14C', '\x155', '\a', '\x35', '\x2', '\x2', '\x14D', '\x155', 
		'\a', ',', '\x2', '\x2', '\x14E', '\x155', '\x5', '\f', '\a', '\x2', '\x14F', 
		'\x155', '\x5', '<', '\x1F', '\x2', '\x150', '\x151', '\a', '\x5', '\x2', 
		'\x2', '\x151', '\x152', '\x5', '$', '\x13', '\x2', '\x152', '\x153', 
		'\a', '\a', '\x2', '\x2', '\x153', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x154', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x154', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x154', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x155', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x159', '\x5', '>', ' ', '\x2', '\x157', '\x158', '\a', '-', 
		'\x2', '\x2', '\x158', '\x15A', '\x5', '>', ' ', '\x2', '\x159', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '=', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x160', '\x5', '\x42', 
		'\"', '\x2', '\x15C', '\x15D', '\a', '\x13', '\x2', '\x2', '\x15D', '\x15E', 
		'\x5', '\x38', '\x1D', '\x2', '\x15E', '\x15F', '\a', '\x14', '\x2', '\x2', 
		'\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x162', '\x16A', '\x5', '\x42', '\"', 
		'\x2', '\x163', '\x16A', '\a', '.', '\x2', '\x2', '\x164', '\x16A', '\a', 
		'/', '\x2', '\x2', '\x165', '\x16A', '\a', '\x30', '\x2', '\x2', '\x166', 
		'\x16A', '\a', '\x31', '\x2', '\x2', '\x167', '\x16A', '\a', '\x4', '\x2', 
		'\x2', '\x168', '\x16A', '\a', '\x18', '\x2', '\x2', '\x169', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x164', '\x3', '\x2', '\x2', '\x2', '\x169', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x41', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\a', '\x32', '\x2', '\x2', '\x16C', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\a', '\x32', '\x2', '\x2', '\x16E', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '(', 'N', 'T', '\x63', '\x66', 'p', 'r', 'v', '\x81', 
		'\x8A', '\x8D', '\x9F', '\xA4', '\xB4', '\xB7', '\xC0', '\xCC', '\xD9', 
		'\xDF', '\xEC', '\xF2', '\xFD', '\x107', '\x10F', '\x117', '\x11C', '\x121', 
		'\x126', '\x12B', '\x130', '\x135', '\x13A', '\x13F', '\x142', '\x148', 
		'\x154', '\x159', '\x160', '\x169',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DaedalusParser
